// <auto-generated />
using System;
using Core.Data.EF.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Core.Data.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20200309161654_module-implementation")]
    partial class moduleimplementation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Domain.EF.Entities.Categoria", b =>
                {
                    b.Property<int>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_categoria")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdExterno")
                        .HasColumnName("cd_externo")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("DsHexadecimal")
                        .HasColumnName("ds_hexadecimal")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<string>("DsImagemDestaque")
                        .HasColumnName("ds_imagem_destaque")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_cadastro")
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit")
                        .HasComment("0 - Inativo / 1 - Ativo");

                    b.Property<int?>("IdCategoriaPai")
                        .HasColumnName("id_categoria_pai")
                        .HasColumnType("int");

                    b.Property<int?>("IdCategoriaVannon")
                        .HasColumnName("id_categoria_vannon")
                        .HasColumnType("int");

                    b.Property<int?>("IdProdutoSkuDestaque")
                        .HasColumnName("id_produto_sku_destaque")
                        .HasColumnType("int");

                    b.Property<string>("NmCategoria")
                        .IsRequired()
                        .HasColumnName("nm_categoria")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("NuOrdem")
                        .HasColumnName("nu_ordem")
                        .HasColumnType("int");

                    b.HasKey("IdCategoria");

                    b.HasIndex("IdCategoriaPai");

                    b.HasIndex("IdProdutoSkuDestaque");

                    b.HasIndex("CdExterno", "IdCategoria", "NmCategoria", "FlStatus", "IdCategoriaPai", "NuOrdem")
                        .HasName("idx_categoria_filhas");

                    b.ToTable("tb_categoria");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.Cliente", b =>
                {
                    b.Property<int>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_cliente")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdExterno")
                        .HasColumnName("cd_externo")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("DsApelido")
                        .HasColumnName("ds_apelido")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DsCelular")
                        .HasColumnName("ds_celular")
                        .HasColumnType("varchar(9)")
                        .HasMaxLength(9)
                        .IsUnicode(false);

                    b.Property<string>("DsCelularDdd")
                        .HasColumnName("ds_celular_ddd")
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("DsCpfCnpj")
                        .IsRequired()
                        .HasColumnName("ds_cpf_cnpj")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("DsEmail")
                        .HasColumnName("ds_email")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DsInscricaoEstadual")
                        .HasColumnName("ds_inscricao_estadual")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DsRazaoSocial")
                        .HasColumnName("ds_razao_social")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DsResponsavel")
                        .HasColumnName("ds_responsavel")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DsRg")
                        .HasColumnName("ds_rg")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("DsSenha")
                        .HasColumnName("ds_senha")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DsSobrenome")
                        .HasColumnName("ds_sobrenome")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DsTelefone")
                        .HasColumnName("ds_telefone")
                        .HasColumnType("varchar(11)")
                        .HasMaxLength(11)
                        .IsUnicode(false);

                    b.Property<string>("DsTelefoneDdd")
                        .HasColumnName("ds_telefone_ddd")
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_cadastro")
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DtMarketingImp")
                        .HasColumnName("dt_marketing_imp")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DtNascimento")
                        .HasColumnName("dt_nascimento")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("FlAceitaMailing")
                        .HasColumnName("fl_aceita_mailing")
                        .HasColumnType("bit");

                    b.Property<bool>("FlAceitaSms")
                        .HasColumnName("fl_aceita_sms")
                        .HasColumnType("bit");

                    b.Property<bool?>("FlIeIsento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fl_ie_isento")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("FlIntegracao")
                        .HasColumnName("fl_integracao")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<bool>("FlMarketing")
                        .HasColumnName("fl_marketing")
                        .HasColumnType("bit");

                    b.Property<bool>("FlNovo")
                        .HasColumnName("fl_novo")
                        .HasColumnType("bit");

                    b.Property<string>("FlSexo")
                        .HasColumnName("fl_sexo")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasComment("F - Feminino / M - Masculino")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<string>("FlTipoPessoa")
                        .IsRequired()
                        .HasColumnName("fl_tipo_pessoa")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasComment("0 - Pessoa Física / 1 - Pessoa Juridica")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("NmCliente")
                        .IsRequired()
                        .HasColumnName("nm_cliente")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("NomeSocial")
                        .HasColumnName("nome_social")
                        .HasColumnType("varchar(255)")
                        .HasComment("Para SAP Marketing Apenas")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("IdCliente");

                    b.ToTable("tb_cliente");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.DadosLoja", b =>
                {
                    b.Property<int>("IdDadosLoja")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_dados_loja")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdGoogleAnalytics")
                        .HasColumnName("cd_google_analytics")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("DsArquivoLogo")
                        .HasColumnName("ds_arquivo_logo")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsBairro")
                        .HasColumnName("ds_bairro")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DsCelular")
                        .HasColumnName("ds_celular")
                        .HasColumnType("varchar(11)")
                        .HasMaxLength(11)
                        .IsUnicode(false);

                    b.Property<string>("DsCep")
                        .HasColumnName("ds_cep")
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("DsCidade")
                        .HasColumnName("ds_cidade")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DsClearSaleEntityCode")
                        .HasColumnName("ds_clear_sale_entity_code")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DsCnpjCpf")
                        .HasColumnName("ds_cnpj_cpf")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("DsComplemento")
                        .HasColumnName("ds_complemento")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DsCopyright")
                        .HasColumnName("ds_copyright")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsCriptografiaSmtp")
                        .HasColumnName("ds_criptografia_smtp")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("DsDominio")
                        .HasColumnName("ds_dominio")
                        .HasColumnType("varchar(220)")
                        .HasMaxLength(220)
                        .IsUnicode(false);

                    b.Property<string>("DsEmailContato")
                        .HasColumnName("ds_email_contato")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("DsEndereco")
                        .HasColumnName("ds_endereco")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DsEstado")
                        .HasColumnName("ds_estado")
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("DsHorarioAtendimento")
                        .HasColumnName("ds_horario_atendimento")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsLoginSmtp")
                        .HasColumnName("ds_login_smtp")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DsNumero")
                        .HasColumnName("ds_numero")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DsRoiHero")
                        .HasColumnName("ds_roi_hero")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("DsSenhaSmtp")
                        .HasColumnName("ds_senha_smtp")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DsSeoDescription")
                        .HasColumnName("ds_seo_description")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("DsSeoKeywords")
                        .HasColumnName("ds_seo_keywords")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("DsSmtp")
                        .HasColumnName("ds_smtp")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("DsTelefone")
                        .HasColumnName("ds_telefone")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("DsTelefoneAtendimento")
                        .HasColumnName("ds_telefone_atendimento")
                        .HasColumnType("varchar(34)")
                        .HasMaxLength(34)
                        .IsUnicode(false);

                    b.Property<string>("DsTitulo")
                        .HasColumnName("ds_titulo")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsToken")
                        .HasColumnName("ds_token")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("DsUrlLoja")
                        .HasColumnName("ds_url_loja")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("FlAutocomplete")
                        .HasColumnName("fl_autocomplete")
                        .HasColumnType("bit");

                    b.Property<bool?>("FlFarmacia")
                        .HasColumnName("fl_farmacia")
                        .HasColumnType("bit");

                    b.Property<string>("FlTipoPessoa")
                        .HasColumnName("fl_tipo_pessoa")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("NmCliente")
                        .HasColumnName("nm_cliente")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("NmContato")
                        .HasColumnName("nm_contato")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("NuAlturaAmpliada")
                        .HasColumnName("nu_altura_ampliada")
                        .HasColumnType("int");

                    b.Property<int>("NuAlturaCarrossel")
                        .HasColumnName("nu_altura_carrossel")
                        .HasColumnType("int");

                    b.Property<int>("NuAlturaMini")
                        .HasColumnName("nu_altura_mini")
                        .HasColumnType("int");

                    b.Property<int>("NuAlturaNormal")
                        .HasColumnName("nu_altura_normal")
                        .HasColumnType("int");

                    b.Property<int>("NuAlturaSuper")
                        .HasColumnName("nu_altura_super")
                        .HasColumnType("int");

                    b.Property<int>("NuAlturaVariacao")
                        .HasColumnName("nu_altura_variacao")
                        .HasColumnType("int");

                    b.Property<int>("NuLarguraAmpliada")
                        .HasColumnName("nu_largura_ampliada")
                        .HasColumnType("int");

                    b.Property<int>("NuLarguraCarrossel")
                        .HasColumnName("nu_largura_carrossel")
                        .HasColumnType("int");

                    b.Property<int>("NuLarguraMini")
                        .HasColumnName("nu_largura_mini")
                        .HasColumnType("int");

                    b.Property<int>("NuLarguraNormal")
                        .HasColumnName("nu_largura_normal")
                        .HasColumnType("int");

                    b.Property<int>("NuLarguraSuper")
                        .HasColumnName("nu_largura_super")
                        .HasColumnType("int");

                    b.Property<int>("NuLarguraVariacao")
                        .HasColumnName("nu_largura_variacao")
                        .HasColumnType("int");

                    b.Property<short?>("NuPorta")
                        .HasColumnName("nu_porta")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("VlMaximo")
                        .HasColumnName("vl_maximo")
                        .HasColumnType("money");

                    b.Property<decimal?>("VlMinimo")
                        .HasColumnName("vl_minimo")
                        .HasColumnType("money");

                    b.HasKey("IdDadosLoja");

                    b.ToTable("tb_dados_loja");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.Pedido", b =>
                {
                    b.Property<int>("IdPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_pedido")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdAdministradoraPbm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cd_administradora_pbm")
                        .HasColumnType("varchar(3)")
                        .HasDefaultValueSql("(' ')")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("CdRastreamento")
                        .HasColumnName("cd_rastreamento")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CdVendedor")
                        .HasColumnName("CD_VENDEDOR")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("DsCep")
                        .HasColumnName("ds_cep")
                        .HasColumnType("char(8)")
                        .IsFixedLength(true)
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("DsComprovantePbm")
                        .HasColumnName("ds_comprovante_pbm")
                        .HasColumnType("varchar(300)")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<string>("DsDescricao")
                        .HasColumnName("ds_descricao")
                        .HasColumnType("varchar(300)")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<string>("DsFingerPrintSessionId")
                        .HasColumnName("ds_finger_print_session_id")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("DsIp")
                        .IsRequired()
                        .HasColumnName("ds_ip")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DsMensagemEntrega")
                        .HasColumnName("ds_mensagem_entrega")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("DsNavegador")
                        .IsRequired()
                        .HasColumnName("ds_navegador")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DsStatusAntifraude")
                        .HasColumnName("ds_status_antifraude")
                        .HasColumnType("char(3)")
                        .IsFixedLength(true)
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtExpiracao")
                        .HasColumnName("dt_expiracao")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("DtPedido")
                        .HasColumnName("dt_pedido")
                        .HasColumnType("smalldatetime");

                    b.Property<bool?>("FlImpresso")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fl_impresso")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("FlIntegracao")
                        .HasColumnName("fl_integracao")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<bool?>("FlMarketingCarrinhoVerificado")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fl_marketing_carrinho_verificado")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("FlNfPaulista")
                        .HasColumnName("fl_nf_paulista")
                        .HasColumnType("bit");

                    b.Property<bool>("FlRetornoEstoque")
                        .HasColumnName("fl_retorno_estoque")
                        .HasColumnType("bit");

                    b.Property<int?>("IdCliente")
                        .HasColumnName("id_cliente")
                        .HasColumnType("int");

                    b.Property<int?>("IdModalidadeEntrega")
                        .HasColumnName("id_modalidade_entrega")
                        .HasColumnType("int");

                    b.Property<int?>("IdParceiro")
                        .HasColumnName("id_parceiro")
                        .HasColumnType("int");

                    b.Property<int>("IdPedidoOrigem")
                        .HasColumnName("id_pedido_origem")
                        .HasColumnType("int");

                    b.Property<int>("IdPedidoStatus")
                        .HasColumnName("id_pedido_status")
                        .HasColumnType("int");

                    b.Property<int?>("IdPedidoStatusPbm")
                        .HasColumnName("id_pedido_status_pbm")
                        .HasColumnType("int");

                    b.Property<int?>("IdPraca")
                        .HasColumnName("id_praca")
                        .HasColumnType("int");

                    b.Property<int?>("IdUsuarioTelevendas")
                        .HasColumnName("id_usuario_televendas")
                        .HasColumnType("int");

                    b.Property<string>("NmModalidadeEntrega")
                        .HasColumnName("nm_modalidade_entrega")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long>("NrCartaoclientePbm")
                        .HasColumnName("nr_cartaocliente_pbm")
                        .HasColumnType("bigint");

                    b.Property<long>("NrCentralPbm")
                        .HasColumnName("nr_central_pbm")
                        .HasColumnType("bigint");

                    b.Property<long>("NrCpfclientePbm")
                        .HasColumnName("nr_cpfcliente_pbm")
                        .HasColumnType("bigint");

                    b.Property<long>("NrCupomFiscal")
                        .HasColumnName("nr_cupom_fiscal")
                        .HasColumnType("bigint");

                    b.Property<string>("NuPedido")
                        .HasColumnName("nu_pedido")
                        .HasColumnType("varchar(12)")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<int?>("NuPrazoEntrega")
                        .HasColumnName("nu_prazo_entrega")
                        .HasColumnType("int");

                    b.Property<decimal?>("VlDesconto")
                        .HasColumnName("vl_desconto")
                        .HasColumnType("money");

                    b.Property<decimal?>("VlDescontoCarrinho")
                        .HasColumnName("vl_desconto_carrinho")
                        .HasColumnType("money");

                    b.Property<decimal?>("VlDescontoCliente")
                        .HasColumnName("vl_desconto_cliente")
                        .HasColumnType("money");

                    b.Property<decimal?>("VlDescontoCupom")
                        .HasColumnName("vl_desconto_cupom")
                        .HasColumnType("money");

                    b.Property<decimal?>("VlDescontoFrete")
                        .HasColumnName("vl_desconto_frete")
                        .HasColumnType("money");

                    b.Property<decimal?>("VlDescontoPagamento")
                        .HasColumnName("vl_desconto_pagamento")
                        .HasColumnType("money");

                    b.Property<decimal?>("VlDescontoPrimeiraCompra")
                        .HasColumnName("vl_desconto_primeira_compra")
                        .HasColumnType("money");

                    b.Property<decimal?>("VlDescontoProduto")
                        .HasColumnName("vl_desconto_produto")
                        .HasColumnType("money");

                    b.Property<decimal?>("VlFrete")
                        .HasColumnName("vl_frete")
                        .HasColumnType("money");

                    b.Property<decimal>("VlTotal")
                        .HasColumnName("vl_total")
                        .HasColumnType("money");

                    b.HasKey("IdPedido");

                    b.HasIndex("VlTotal", "IdPraca", "NmModalidadeEntrega", "NuPedido", "FlIntegracao", "IdCliente", "IdPedido", "DsStatusAntifraude", "DtPedido", "IdPedidoStatus")
                        .HasName("idx_pedido_id_pedido_status");

                    b.HasIndex("DtPedido", "DtExpiracao", "IdCliente", "IdPedido", "DsIp", "DsNavegador", "VlDesconto", "VlTotal", "VlDescontoFrete", "VlFrete", "IdPedidoStatus")
                        .HasName("rel_carrinho_cliente");

                    b.ToTable("tb_pedido");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.PedidoEntrega", b =>
                {
                    b.Property<int>("IdPedidoEntrega")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_pedido_entrega")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsBairro")
                        .IsRequired()
                        .HasColumnName("ds_bairro")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DsCep")
                        .IsRequired()
                        .HasColumnName("ds_cep")
                        .HasColumnType("char(8)")
                        .IsFixedLength(true)
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("DsCidade")
                        .IsRequired()
                        .HasColumnName("ds_cidade")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DsComplemento")
                        .HasColumnName("ds_complemento")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DsDestinatario")
                        .HasColumnName("ds_destinatario")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DsEndereco")
                        .IsRequired()
                        .HasColumnName("ds_endereco")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DsEstado")
                        .IsRequired()
                        .HasColumnName("ds_estado")
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("DsReferencia")
                        .HasColumnName("ds_referencia")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("IdClienteEndereco")
                        .HasColumnName("id_cliente_endereco")
                        .HasColumnType("int");

                    b.Property<int>("IdPedido")
                        .HasColumnName("id_pedido")
                        .HasColumnType("int");

                    b.Property<string>("NmTipoEndereco")
                        .HasColumnName("nm_tipo_endereco")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NuEndereco")
                        .IsRequired()
                        .HasColumnName("nu_endereco")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("IdPedidoEntrega");

                    b.HasIndex("IdPedido")
                        .HasName("idx_pedido_entrega");

                    b.HasIndex("DsCep", "IdClienteEndereco", "NmTipoEndereco")
                        .HasName("NonClusteredIndex-20181010-162155");

                    b.ToTable("tb_pedido_entrega");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.PedidoPagamento", b =>
                {
                    b.Property<int>("IdPedidoPagamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_pedido_pagamento")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdBarra")
                        .HasColumnName("cd_barra")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("CdSeguranca")
                        .HasColumnName("cd_seguranca")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsBandeiraMaquineta")
                        .HasColumnName("ds_bandeira_maquineta")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DsChaveCobranca")
                        .HasColumnName("ds_chave_cobranca")
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("DsChavePedido")
                        .HasColumnName("ds_chave_pedido")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsChaveTransacao")
                        .HasColumnName("ds_chave_transacao")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsReciboCliente")
                        .HasColumnName("ds_recibo_cliente")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("DsReciboEmpresa")
                        .HasColumnName("ds_recibo_empresa")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("DsUrlBoleto")
                        .HasColumnName("ds_url_boleto")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("DsUrlTransferencia")
                        .HasColumnName("ds_url_transferencia")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("DtValidadeCartao")
                        .HasColumnName("dt_validade_cartao")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DtVencimento")
                        .HasColumnName("dt_vencimento")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("IdPagamento")
                        .HasColumnName("id_pagamento")
                        .HasColumnType("int");

                    b.Property<int>("IdPedido")
                        .HasColumnName("id_pedido")
                        .HasColumnType("int");

                    b.Property<string>("NmCartao")
                        .HasColumnName("nm_cartao")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NossoNumero")
                        .HasColumnName("nosso_numero")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Nsu")
                        .HasColumnName("nsu")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("NuBinCartao")
                        .HasColumnName("nu_bin_cartao")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("NuCartao")
                        .HasColumnName("nu_cartao")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("NuComprovante")
                        .HasColumnName("nu_comprovante")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NuNit")
                        .HasColumnName("nu_nit")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("NuParcela")
                        .HasColumnName("nu_parcela")
                        .HasColumnType("int");

                    b.Property<string>("NuTransacao")
                        .HasColumnName("nu_transacao")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<decimal?>("VlDinheiro")
                        .HasColumnName("vl_dinheiro")
                        .HasColumnType("money");

                    b.Property<decimal>("VlParcela")
                        .HasColumnName("vl_parcela")
                        .HasColumnType("money");

                    b.Property<decimal?>("VlTroco")
                        .HasColumnName("vl_troco")
                        .HasColumnType("money");

                    b.HasKey("IdPedidoPagamento");

                    b.HasIndex("IdPagamento");

                    b.HasIndex("IdPedido")
                        .HasName("IndiceIDPedido");

                    b.HasIndex("IdPedidoPagamento")
                        .HasName("IndiceIDPagamento");

                    b.HasIndex("IdPedido", "IdPagamento", "NuParcela")
                        .HasName("index_tb_pedido_pagamento_pedidosql");

                    b.ToTable("tb_pedido_pagamento");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.PedidoProdutoSku", b =>
                {
                    b.Property<int>("IdPedidoProdutoSku")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_pedido_produto_sku")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdProgramaPbm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cd_programa_pbm")
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("(' ')")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool>("FlBrinde")
                        .HasColumnName("fl_brinde")
                        .HasColumnType("bit");

                    b.Property<bool>("FlEncomenda")
                        .HasColumnName("fl_encomenda")
                        .HasColumnType("bit");

                    b.Property<bool?>("FlEstoqueDisponivel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fl_estoque_disponivel")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("FlPbm")
                        .HasColumnName("fl_pbm")
                        .HasColumnType("bit");

                    b.Property<int>("IdPedido")
                        .HasColumnName("id_pedido")
                        .HasColumnType("int");

                    b.Property<int?>("IdProdutoCasado")
                        .HasColumnName("id_produto_casado")
                        .HasColumnType("int");

                    b.Property<int>("IdProdutoSku")
                        .HasColumnName("id_produto_sku")
                        .HasColumnType("int");

                    b.Property<int>("NuQuantidade")
                        .HasColumnName("nu_quantidade")
                        .HasColumnType("int");

                    b.Property<decimal>("PcDescontoPbm")
                        .HasColumnName("pc_desconto_pbm")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<decimal>("VlDesconto")
                        .HasColumnName("vl_desconto")
                        .HasColumnType("money");

                    b.Property<decimal?>("VlDescontoCasada")
                        .HasColumnName("vl_desconto_casada")
                        .HasColumnType("money");

                    b.Property<decimal?>("VlEmbalagem")
                        .HasColumnName("vl_embalagem")
                        .HasColumnType("money");

                    b.Property<decimal>("VlProduto")
                        .HasColumnName("vl_produto")
                        .HasColumnType("money");

                    b.Property<decimal?>("VlProdutoDe")
                        .HasColumnName("vl_produto_de")
                        .HasColumnType("money");

                    b.HasKey("IdPedidoProdutoSku");

                    b.HasIndex("IdPedido")
                        .HasName("idx_pedido_produto_sku");

                    b.HasIndex("IdProdutoSku")
                        .HasName("idx_produto_sku");

                    b.HasIndex("VlEmbalagem", "IdPedido")
                        .HasName("index_tb_pedido_produto_sku_pedidosql");

                    b.ToTable("tb_pedido_produto_sku");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.Praca", b =>
                {
                    b.Property<int>("IdPraca")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_praca")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdExterno")
                        .HasColumnName("cd_externo")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("DsAlias")
                        .HasColumnName("ds_alias")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("DsArquivoLogo")
                        .HasColumnName("ds_arquivo_logo")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsBairro")
                        .HasColumnName("ds_bairro")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsCep")
                        .HasColumnName("ds_cep")
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("DsCidade")
                        .HasColumnName("ds_cidade")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsComplemento")
                        .HasColumnName("ds_complemento")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DsEmail")
                        .HasColumnName("ds_email")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsEndereco")
                        .HasColumnName("ds_endereco")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DsEstado")
                        .HasColumnName("ds_estado")
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("DsHorarioAtendimento")
                        .HasColumnName("ds_horario_atendimento")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DsTelefone")
                        .HasColumnName("ds_telefone")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DsWhatsapp")
                        .HasColumnName("ds_whatsapp")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DtUltimoPedido")
                        .HasColumnName("dt_ultimo_pedido")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("FlAtivo")
                        .HasColumnName("fl_ativo")
                        .HasColumnType("bit");

                    b.Property<bool?>("FlExibeFrontend")
                        .HasColumnName("fl_exibe_frontend")
                        .HasColumnType("bit");

                    b.Property<bool>("FlInicial")
                        .HasColumnName("fl_inicial")
                        .HasColumnType("bit");

                    b.Property<bool>("FlPadrao")
                        .HasColumnName("fl_padrao")
                        .HasColumnType("bit");

                    b.Property<int?>("IdPracaPadrao")
                        .HasColumnName("id_praca_padrao")
                        .HasColumnType("int");

                    b.Property<string>("NmPraca")
                        .IsRequired()
                        .HasColumnName("nm_praca")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NuEndereco")
                        .HasColumnName("nu_endereco")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("IdPraca");

                    b.HasIndex("IdPracaPadrao");

                    b.ToTable("tb_praca");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.ProdutoSku", b =>
                {
                    b.Property<int>("IdProdutoSku")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto_sku")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdBarras")
                        .HasColumnName("cd_barras")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("CdExterno")
                        .HasColumnName("cd_externo")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("CdMs")
                        .HasColumnName("cd_ms")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DtCadastro")
                        .HasColumnName("dt_cadastro")
                        .HasColumnType("datetime");

                    b.Property<bool>("FlBrinde")
                        .HasColumnName("fl_brinde")
                        .HasColumnType("bit");

                    b.Property<bool>("FlExibirIndividualmente")
                        .HasColumnName("fl_exibir_individualmente")
                        .HasColumnType("bit");

                    b.Property<int>("IdProduto")
                        .HasColumnName("id_produto")
                        .HasColumnType("int");

                    b.Property<string>("IdProdutoSap")
                        .HasColumnName("id_produto_sap")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("NmProdutoSku")
                        .HasColumnName("nm_produto_sku")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("NuAltura")
                        .HasColumnName("nu_altura")
                        .HasColumnType("int");

                    b.Property<int>("NuLargura")
                        .HasColumnName("nu_largura")
                        .HasColumnType("int");

                    b.Property<decimal>("NuPeso")
                        .HasColumnName("nu_peso")
                        .HasColumnType("decimal(10, 3)");

                    b.Property<int>("NuProfundidade")
                        .HasColumnName("nu_profundidade")
                        .HasColumnType("int");

                    b.Property<decimal?>("PcDescontoAtendente")
                        .HasColumnName("pc_desconto_atendente")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("IdProdutoSku");

                    b.HasIndex("IdProduto", "FlBrinde")
                        .HasName("IX_produto");

                    b.ToTable("tb_produto_sku");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.ScLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnName("action")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasColumnName("application")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Creator")
                        .IsRequired()
                        .HasColumnName("creator")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnName("inserted_date")
                        .HasColumnType("datetime");

                    b.Property<string>("IpUser")
                        .IsRequired()
                        .HasColumnName("ip_user")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasColumnType("varchar(90)")
                        .HasMaxLength(90)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("sc_log");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbAcesso", b =>
                {
                    b.Property<int>("IdAcesso")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_acesso")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsAcesso")
                        .IsRequired()
                        .HasColumnName("ds_acesso")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdAcesso");

                    b.ToTable("tb_acesso");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbAcessoAplicativo", b =>
                {
                    b.Property<int>("IdAcessoAplicativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_acesso_aplicativo")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdAcesso")
                        .HasColumnName("id_acesso")
                        .HasColumnType("int");

                    b.Property<int>("IdAplicativo")
                        .HasColumnName("id_aplicativo")
                        .HasColumnType("int");

                    b.HasKey("IdAcessoAplicativo");

                    b.HasIndex("IdAplicativo");

                    b.ToTable("tb_acesso_aplicativo");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbAplicativo", b =>
                {
                    b.Property<int>("IdAplicativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_aplicativo")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsAplicativo")
                        .IsRequired()
                        .HasColumnName("ds_aplicativo")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("FlGraficoDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fl_grafico_default")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("NmAplicativo")
                        .IsRequired()
                        .HasColumnName("nm_aplicativo")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("IdAplicativo");

                    b.ToTable("tb_aplicativo");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbAuditFrete", b =>
                {
                    b.Property<int>("IdAuditFrete")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_audit_frete")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsQuery")
                        .HasColumnName("ds_query")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DtOcorrencia")
                        .HasColumnName("dt_ocorrencia")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("IdPedido")
                        .HasColumnName("id_pedido")
                        .HasColumnType("int");

                    b.Property<decimal?>("VlFreteAnterior")
                        .HasColumnName("vl_frete_anterior")
                        .HasColumnType("money");

                    b.Property<decimal?>("VlFreteAtual")
                        .HasColumnName("vl_frete_atual")
                        .HasColumnType("money");

                    b.Property<decimal?>("VlTotalAnterior")
                        .HasColumnName("vl_total_anterior")
                        .HasColumnType("money");

                    b.Property<decimal?>("VlTotalAtual")
                        .HasColumnName("vl_total_atual")
                        .HasColumnType("money");

                    b.HasKey("IdAuditFrete");

                    b.ToTable("tb_audit_frete");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbAuditPedido", b =>
                {
                    b.Property<int>("IdAuditPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_audit_pedido")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsQuery")
                        .HasColumnName("ds_query")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DtOcorrencia")
                        .HasColumnName("dt_ocorrencia")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("IdModalidadeEntregaNew")
                        .HasColumnName("id_modalidade_entrega_new")
                        .HasColumnType("int");

                    b.Property<int?>("IdModalidadeEntregaOld")
                        .HasColumnName("id_modalidade_entrega_old")
                        .HasColumnType("int");

                    b.Property<int?>("IdPedido")
                        .HasColumnName("id_pedido")
                        .HasColumnType("int");

                    b.Property<int?>("IdPedidoStatusNew")
                        .HasColumnName("id_pedido_status_new")
                        .HasColumnType("int");

                    b.Property<int?>("IdPedidoStatusOld")
                        .HasColumnName("id_pedido_status_old")
                        .HasColumnType("int");

                    b.Property<string>("Server")
                        .HasColumnName("server")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Usuario")
                        .HasColumnName("usuario")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("VlFreteAnterior")
                        .HasColumnName("vl_frete_anterior")
                        .HasColumnType("money");

                    b.Property<decimal?>("VlFreteAtual")
                        .HasColumnName("vl_frete_atual")
                        .HasColumnType("money");

                    b.HasKey("IdAuditPedido");

                    b.ToTable("tb_audit_pedido");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbAutorizador", b =>
                {
                    b.Property<int>("IdAutorizador")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_autorizador")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdDescricao")
                        .HasColumnName("cd_descricao")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("CdExterno")
                        .HasColumnName("cd_externo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DtAlteracao")
                        .HasColumnName("dt_alteracao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DtInclusao")
                        .HasColumnName("dt_inclusao")
                        .HasColumnType("datetime");

                    b.HasKey("IdAutorizador");

                    b.HasIndex("CdExterno")
                        .IsUnique()
                        .HasName("EK_tb_autorizador");

                    b.ToTable("tb_autorizador");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbBackofficeSessao", b =>
                {
                    b.Property<string>("IdSessao")
                        .HasColumnName("id_sessao")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtAtualizacao")
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime");

                    b.Property<int>("IdUsuario")
                        .HasColumnName("id_usuario")
                        .HasColumnType("int");

                    b.HasKey("IdSessao");

                    b.HasIndex("IdUsuario");

                    b.ToTable("tb_backoffice_sessao");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbBanner", b =>
                {
                    b.Property<int>("IdBanner")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_banner")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsArquivoBanner")
                        .IsRequired()
                        .HasColumnName("ds_arquivo_banner")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsDescricao")
                        .HasColumnName("ds_descricao")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DsFundoHexadecimal")
                        .HasColumnName("ds_fundo_hexadecimal")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<string>("DsFundoImagem")
                        .HasColumnName("ds_fundo_imagem")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsImagemIcone")
                        .HasColumnName("ds_imagem_icone")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsLinkBanner")
                        .HasColumnName("ds_link_banner")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_cadastro")
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DtFinal")
                        .HasColumnName("dt_final")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("DtInicial")
                        .HasColumnName("dt_inicial")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("FlPadrao")
                        .HasColumnName("fl_padrao")
                        .HasColumnType("bit");

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit")
                        .HasComment("0 - Inativo / 1 - Ativo");

                    b.Property<int>("IdBannerTarget")
                        .HasColumnName("id_banner_target")
                        .HasColumnType("int");

                    b.Property<int>("IdLayoutPosicao")
                        .HasColumnName("id_layout_posicao")
                        .HasColumnType("int");

                    b.Property<string>("NmBanner")
                        .IsRequired()
                        .HasColumnName("nm_banner")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("NuAlturaPopup")
                        .HasColumnName("nu_altura_popup")
                        .HasColumnType("int");

                    b.Property<int>("NuClick")
                        .HasColumnName("nu_click")
                        .HasColumnType("int");

                    b.Property<int?>("NuLarguraPopup")
                        .HasColumnName("nu_largura_popup")
                        .HasColumnType("int");

                    b.Property<int?>("NuOrdem")
                        .HasColumnName("nu_ordem")
                        .HasColumnType("int");

                    b.HasKey("IdBanner");

                    b.HasIndex("IdBannerTarget");

                    b.HasIndex("IdLayoutPosicao");

                    b.ToTable("tb_banner");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbBannerBusca", b =>
                {
                    b.Property<int>("IdBannerBusca")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_banner_busca")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsTermoBusca")
                        .IsRequired()
                        .HasColumnName("ds_termo_busca")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("IdBanner")
                        .HasColumnName("id_banner")
                        .HasColumnType("int");

                    b.HasKey("IdBannerBusca");

                    b.HasIndex("IdBanner");

                    b.ToTable("tb_banner_busca");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbBannerCategoria", b =>
                {
                    b.Property<int>("IdBannerCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_banner_categoria")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdBanner")
                        .HasColumnName("id_banner")
                        .HasColumnType("int");

                    b.Property<int>("IdCategoria")
                        .HasColumnName("id_categoria")
                        .HasColumnType("int");

                    b.HasKey("IdBannerCategoria");

                    b.HasIndex("IdBanner");

                    b.HasIndex("IdCategoria");

                    b.ToTable("tb_banner_categoria");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbBannerPraca", b =>
                {
                    b.Property<int>("IdBannerPraca")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_banner_praca")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdBanner")
                        .HasColumnName("id_banner")
                        .HasColumnType("int");

                    b.Property<int>("IdPraca")
                        .HasColumnName("id_praca")
                        .HasColumnType("int");

                    b.HasKey("IdBannerPraca");

                    b.HasIndex("IdBanner");

                    b.HasIndex("IdPraca");

                    b.ToTable("tb_banner_praca");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbBannerProduto", b =>
                {
                    b.Property<int>("IdBannerProduto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_banner_produto")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdBanner")
                        .HasColumnName("id_banner")
                        .HasColumnType("int");

                    b.Property<int>("IdProduto")
                        .HasColumnName("id_produto")
                        .HasColumnType("int");

                    b.HasKey("IdBannerProduto");

                    b.HasIndex("IdBanner");

                    b.HasIndex("IdProduto");

                    b.ToTable("tb_banner_produto");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbBannerTarget", b =>
                {
                    b.Property<int>("IdBannerTarget")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_banner_target")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NmBannerTarget")
                        .IsRequired()
                        .HasColumnName("nm_banner_target")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdBannerTarget");

                    b.ToTable("tb_banner_target");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbBannerVitrine", b =>
                {
                    b.Property<int>("IdBannerVitrine")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_banner_vitrine")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdBanner")
                        .HasColumnName("id_banner")
                        .HasColumnType("int");

                    b.Property<int>("IdVitrine")
                        .HasColumnName("id_vitrine")
                        .HasColumnType("int");

                    b.HasKey("IdBannerVitrine");

                    b.HasIndex("IdBanner");

                    b.HasIndex("IdVitrine");

                    b.ToTable("tb_banner_vitrine");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbBusca", b =>
                {
                    b.Property<int>("IdBusca")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_busca")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsTermoBusca")
                        .IsRequired()
                        .HasColumnName("ds_termo_busca")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtUltimaBusca")
                        .HasColumnName("dt_ultima_busca")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("NuQtdBusca")
                        .HasColumnName("nu_qtd_busca")
                        .HasColumnType("int");

                    b.HasKey("IdBusca");

                    b.ToTable("tb_busca");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbCartaoClientePbm", b =>
                {
                    b.Property<int>("IdCartaoClientePbm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_cartao_cliente_pbm")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CpfCliente")
                        .HasColumnName("cpf_cliente")
                        .HasColumnType("bigint");

                    b.Property<string>("DsPrograma")
                        .HasColumnName("ds_programa")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DtInclusao")
                        .HasColumnName("dt_inclusao")
                        .HasColumnType("datetime");

                    b.Property<int>("IdServico")
                        .HasColumnName("id_servico")
                        .HasColumnType("int");

                    b.Property<long>("NmCartao")
                        .HasColumnName("nm_cartao")
                        .HasColumnType("bigint");

                    b.HasKey("IdCartaoClientePbm");

                    b.ToTable("tb_cartao_cliente_pbm");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbCategoriaSeo", b =>
                {
                    b.Property<int>("IdCategoriaSeo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_categoria_seo")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsDescription")
                        .HasColumnName("ds_description")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("DsKeywords")
                        .HasColumnName("ds_keywords")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("DsTitle")
                        .HasColumnName("ds_title")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("IdCategoria")
                        .HasColumnName("id_categoria")
                        .HasColumnType("int");

                    b.HasKey("IdCategoriaSeo");

                    b.HasIndex("IdCategoria");

                    b.ToTable("tb_categoria_seo");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbClienteEndereco", b =>
                {
                    b.Property<int>("IdClienteEndereco")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_cliente_endereco")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsBairro")
                        .IsRequired()
                        .HasColumnName("ds_bairro")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DsCep")
                        .IsRequired()
                        .HasColumnName("ds_cep")
                        .HasColumnType("char(9)")
                        .IsFixedLength(true)
                        .HasMaxLength(9)
                        .IsUnicode(false);

                    b.Property<string>("DsCidade")
                        .IsRequired()
                        .HasColumnName("ds_cidade")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("DsComplemento")
                        .HasColumnName("ds_complemento")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("DsDestinatario")
                        .HasColumnName("ds_destinatario")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DsEndereco")
                        .IsRequired()
                        .HasColumnName("ds_endereco")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DsEstado")
                        .IsRequired()
                        .HasColumnName("ds_estado")
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("DsReferencia")
                        .HasColumnName("ds_referencia")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<bool>("FlEnderecoCadastro")
                        .HasColumnName("fl_endereco_cadastro")
                        .HasColumnType("bit");

                    b.Property<bool?>("FlRemovido")
                        .HasColumnName("fl_removido")
                        .HasColumnType("bit");

                    b.Property<int>("IdCliente")
                        .HasColumnName("id_cliente")
                        .HasColumnType("int");

                    b.Property<int?>("IdClienteEnderecoTipo")
                        .HasColumnName("id_cliente_endereco_tipo")
                        .HasColumnType("int");

                    b.Property<string>("NuEndereco")
                        .IsRequired()
                        .HasColumnName("nu_endereco")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("IdClienteEndereco");

                    b.HasIndex("IdClienteEnderecoTipo");

                    b.HasIndex("IdCliente", "FlEnderecoCadastro")
                        .HasName("idx_cliente_endereco");

                    b.ToTable("tb_cliente_endereco");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbClienteEnderecoTipo", b =>
                {
                    b.Property<int>("IdClienteEnderecoTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_cliente_endereco_tipo")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NmClienteEnderecoTipo")
                        .IsRequired()
                        .HasColumnName("nm_cliente_endereco_tipo")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdClienteEnderecoTipo");

                    b.ToTable("tb_cliente_endereco_tipo");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbClienteObservacao", b =>
                {
                    b.Property<int>("IdClienteObservacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_cliente_observacao")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsObservacao")
                        .IsRequired()
                        .HasColumnName("ds_observacao")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_cadastro")
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("IdCliente")
                        .HasColumnName("id_cliente")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnName("id_usuario")
                        .HasColumnType("int");

                    b.HasKey("IdClienteObservacao");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdUsuario");

                    b.ToTable("tb_cliente_observacao");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbClienteToken", b =>
                {
                    b.Property<int>("IdClienteToken")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_cliente_token")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsToken")
                        .HasColumnName("ds_token")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("DtInclusao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_inclusao")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("FlExpirado")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fl_expirado")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("FlSenha")
                        .HasColumnName("fl_senha")
                        .HasColumnType("bit");

                    b.Property<int?>("IdCliente")
                        .HasColumnName("id_cliente")
                        .HasColumnType("int");

                    b.HasKey("IdClienteToken")
                        .HasName("PK__tb_clien__8E60392D78765AAD");

                    b.ToTable("tb_cliente_token");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbConexao", b =>
                {
                    b.Property<int>("IdConexao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_conexao")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsConexao")
                        .IsRequired()
                        .HasColumnName("ds_conexao")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("NmConexao")
                        .IsRequired()
                        .HasColumnName("nm_conexao")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("IdConexao");

                    b.ToTable("tb_conexao");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbConexaoPraca", b =>
                {
                    b.Property<int>("IdConexaoPraca")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_conexao_praca")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdConexao")
                        .HasColumnName("id_conexao")
                        .HasColumnType("int");

                    b.Property<int>("IdPraca")
                        .HasColumnName("id_praca")
                        .HasColumnType("int");

                    b.HasKey("IdConexaoPraca");

                    b.ToTable("tb_conexao_praca");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbConteudo", b =>
                {
                    b.Property<int>("IdConteudo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_conteudo")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsImagem")
                        .HasColumnName("ds_imagem")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DsUrlConteudo")
                        .IsRequired()
                        .HasColumnName("ds_url_conteudo")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_cadastro")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("FlExibeCentralAtendimento")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fl_exibe_central_atendimento")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<int>("IdConteudoCategoria")
                        .HasColumnName("id_conteudo_categoria")
                        .HasColumnType("int");

                    b.Property<int?>("IdConteudoLocal")
                        .HasColumnName("id_conteudo_local")
                        .HasColumnType("int");

                    b.Property<int>("IdConteudoTarget")
                        .HasColumnName("id_conteudo_target")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("IdConteudoTipo")
                        .HasColumnName("id_conteudo_tipo")
                        .HasColumnType("int");

                    b.Property<string>("NmConteudo")
                        .IsRequired()
                        .HasColumnName("nm_conteudo")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("NuAlturaPopup")
                        .HasColumnName("nu_altura_popup")
                        .HasColumnType("int");

                    b.Property<int?>("NuLarguraPopup")
                        .HasColumnName("nu_largura_popup")
                        .HasColumnType("int");

                    b.Property<byte>("NuOrdem")
                        .HasColumnName("nu_ordem")
                        .HasColumnType("tinyint");

                    b.Property<string>("TxConteudoHtml")
                        .HasColumnName("tx_conteudo_html")
                        .HasColumnType("text");

                    b.HasKey("IdConteudo");

                    b.HasIndex("IdConteudoCategoria");

                    b.HasIndex("IdConteudoTarget");

                    b.HasIndex("IdConteudoTipo");

                    b.ToTable("tb_conteudo");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbConteudoCategoria", b =>
                {
                    b.Property<int>("IdConteudoCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_conteudo_categoria")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<string>("NmConteudoCategoria")
                        .IsRequired()
                        .HasColumnName("nm_conteudo_categoria")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte>("NuOrdem")
                        .HasColumnName("nu_ordem")
                        .HasColumnType("tinyint");

                    b.HasKey("IdConteudoCategoria");

                    b.ToTable("tb_conteudo_categoria");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbConteudoConteudoLocal", b =>
                {
                    b.Property<int>("IdConteudoConteudoLocal")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_conteudo_conteudo_local")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdConteudo")
                        .HasColumnName("id_conteudo")
                        .HasColumnType("int");

                    b.Property<int>("IdConteudoLocal")
                        .HasColumnName("id_conteudo_local")
                        .HasColumnType("int");

                    b.HasKey("IdConteudoConteudoLocal");

                    b.HasIndex("IdConteudo");

                    b.HasIndex("IdConteudoLocal");

                    b.ToTable("tb_conteudo_conteudo_local");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbConteudoLocal", b =>
                {
                    b.Property<int>("IdConteudoLocal")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_conteudo_local")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NmConteudoLocal")
                        .IsRequired()
                        .HasColumnName("nm_conteudo_local")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdConteudoLocal");

                    b.ToTable("tb_conteudo_local");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbConteudoSeo", b =>
                {
                    b.Property<int>("IdConteudoSeo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_conteudo_seo")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsDescription")
                        .HasColumnName("ds_description")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("DsKeywords")
                        .HasColumnName("ds_keywords")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("DsTitle")
                        .HasColumnName("ds_title")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("IdConteudo")
                        .HasColumnName("id_conteudo")
                        .HasColumnType("int");

                    b.HasKey("IdConteudoSeo");

                    b.HasIndex("IdConteudo");

                    b.ToTable("tb_conteudo_seo");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbConteudoTarget", b =>
                {
                    b.Property<int>("IdConteudoTarget")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_conteudo_target")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NmConteudoTarget")
                        .IsRequired()
                        .HasColumnName("nm_conteudo_target")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdConteudoTarget");

                    b.ToTable("tb_conteudo_target");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbConteudoTipo", b =>
                {
                    b.Property<int>("IdConteudoTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_conteudo_tipo")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NmConteudoTipo")
                        .IsRequired()
                        .HasColumnName("nm_conteudo_tipo")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdConteudoTipo");

                    b.ToTable("tb_conteudo_tipo");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbDeparaClientesVfarma", b =>
                {
                    b.Property<int>("IdDeparaClientesVfarma")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_depara_clientes_vfarma")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsDe")
                        .HasColumnName("ds_de")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("IdConexao")
                        .HasColumnName("id_conexao")
                        .HasColumnType("int");

                    b.Property<int?>("IdDe")
                        .HasColumnName("id_de")
                        .HasColumnType("int");

                    b.Property<int?>("IdPara")
                        .HasColumnName("id_para")
                        .HasColumnType("int");

                    b.Property<string>("NmTabela")
                        .IsRequired()
                        .HasColumnName("nm_tabela")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("IdDeparaClientesVfarma");

                    b.ToTable("tb_depara_clientes_vfarma");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbDeparaFmp", b =>
                {
                    b.Property<int>("IdDepara")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_depara")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdConexao")
                        .HasColumnName("id_conexao")
                        .HasColumnType("int");

                    b.Property<int>("IdDe")
                        .HasColumnName("id_de")
                        .HasColumnType("int");

                    b.Property<int>("IdPara")
                        .HasColumnName("id_para")
                        .HasColumnType("int");

                    b.Property<string>("NmTabela")
                        .IsRequired()
                        .HasColumnName("nm_tabela")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("IdDepara");

                    b.ToTable("tb_depara_fmp");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbDiaSemana", b =>
                {
                    b.Property<int>("IdDiaSemana")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_dia_semana")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsDiaSemana")
                        .IsRequired()
                        .HasColumnName("ds_dia_semana")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdDiaSemana");

                    b.ToTable("tb_dia_semana");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbEanListaTmp", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Ean")
                        .HasColumnName("EAN")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("tb_ean_lista_tmp");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbEbit", b =>
                {
                    b.Property<int>("IdEbit")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_ebit")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdBuscape")
                        .HasColumnName("cd_buscape")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CdEbit")
                        .HasColumnName("cd_ebit")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("FlAtivo")
                        .HasColumnName("fl_ativo")
                        .HasColumnType("bit");

                    b.HasKey("IdEbit");

                    b.ToTable("tb_ebit");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbEmail", b =>
                {
                    b.Property<int>("IdEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_email")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsAssunto")
                        .IsRequired()
                        .HasColumnName("ds_assunto")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DsEmailRemetente")
                        .IsRequired()
                        .HasColumnName("ds_email_remetente")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_cadastro")
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("IdEmailTipo")
                        .HasColumnName("id_email_tipo")
                        .HasColumnType("int");

                    b.Property<int?>("IdPedidoStatus")
                        .HasColumnName("id_pedido_status")
                        .HasColumnType("int");

                    b.Property<string>("NmRemetente")
                        .IsRequired()
                        .HasColumnName("nm_remetente")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TxConteudo")
                        .IsRequired()
                        .HasColumnName("tx_conteudo")
                        .HasColumnType("text");

                    b.HasKey("IdEmail");

                    b.HasIndex("IdEmailTipo");

                    b.HasIndex("IdPedidoStatus");

                    b.ToTable("tb_email");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbEmailTag", b =>
                {
                    b.Property<int>("IdTag")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_tag")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsTag")
                        .IsRequired()
                        .HasColumnName("ds_tag")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("NmTag")
                        .IsRequired()
                        .HasColumnName("nm_tag")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdTag")
                        .HasName("PK_tb_tag");

                    b.ToTable("tb_email_tag");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbEmailTipo", b =>
                {
                    b.Property<int>("IdEmailTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_email_tipo")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsEmailTipo")
                        .IsRequired()
                        .HasColumnName("ds_email_tipo")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("IdEmailTipo");

                    b.ToTable("tb_email_tipo");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbEspecificacao", b =>
                {
                    b.Property<int>("IdEspecificacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_especificacao")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdExterno")
                        .HasColumnName("cd_externo")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("DsHexadecimal")
                        .HasColumnName("ds_hexadecimal")
                        .HasColumnType("char(7)")
                        .IsFixedLength(true)
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<string>("DsImagem")
                        .HasColumnName("ds_imagem")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int>("IdEspecificacaoTipo")
                        .HasColumnName("id_especificacao_tipo")
                        .HasColumnType("int");

                    b.Property<string>("NmEspecificacao")
                        .IsRequired()
                        .HasColumnName("nm_especificacao")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte>("NuOrdem")
                        .HasColumnName("nu_ordem")
                        .HasColumnType("tinyint");

                    b.HasKey("IdEspecificacao");

                    b.HasIndex("IdEspecificacaoTipo");

                    b.ToTable("tb_especificacao");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbEspecificacaoTipo", b =>
                {
                    b.Property<int>("IdEspecificacaoTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_especificacao_tipo")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdExterno")
                        .HasColumnName("cd_externo")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("NmEspecificacaoTipo")
                        .IsRequired()
                        .HasColumnName("nm_especificacao_tipo")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdEspecificacaoTipo");

                    b.ToTable("tb_especificacao_tipo");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbEtiqueta", b =>
                {
                    b.Property<int>("IdEtiqueta")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_etiqueta")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsImagem")
                        .IsRequired()
                        .HasColumnName("ds_imagem")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_cadastro")
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit")
                        .HasComment("0 - Inativo / 1 - Ativo");

                    b.Property<int>("IdEtiquetaTipo")
                        .HasColumnName("id_etiqueta_tipo")
                        .HasColumnType("int");

                    b.Property<string>("NmEtiqueta")
                        .IsRequired()
                        .HasColumnName("nm_etiqueta")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdEtiqueta");

                    b.HasIndex("IdEtiquetaTipo");

                    b.ToTable("tb_etiqueta");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbEtiquetaTipo", b =>
                {
                    b.Property<int>("IdEtiquetaTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_etiqueta_tipo")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NmEtiquetaTipo")
                        .IsRequired()
                        .HasColumnName("nm_etiqueta_tipo")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdEtiquetaTipo");

                    b.ToTable("tb_etiqueta_tipo");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbFaq", b =>
                {
                    b.Property<int>("IdFaq")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_faq")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsPergunta")
                        .IsRequired()
                        .HasColumnName("ds_pergunta")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<int>("IdFaqCategoria")
                        .HasColumnName("id_faq_categoria")
                        .HasColumnType("int");

                    b.Property<string>("TxResposta")
                        .IsRequired()
                        .HasColumnName("tx_resposta")
                        .HasColumnType("text");

                    b.HasKey("IdFaq");

                    b.HasIndex("IdFaqCategoria");

                    b.ToTable("tb_faq");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbFaqCategoria", b =>
                {
                    b.Property<int>("IdFaqCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_faq_categoria")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<string>("NmFaqCategoria")
                        .IsRequired()
                        .HasColumnName("nm_faq_categoria")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("IdFaqCategoria");

                    b.ToTable("tb_faq_categoria");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbFiltro", b =>
                {
                    b.Property<int>("IdFiltro")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_filtro")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdExterno")
                        .HasColumnName("cd_externo")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<bool?>("FlExibeCategoria")
                        .HasColumnName("fl_exibe_categoria")
                        .HasColumnType("bit");

                    b.Property<bool?>("FlExibeProduto")
                        .HasColumnName("fl_exibe_produto")
                        .HasColumnType("bit");

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<int>("IdFiltroTipo")
                        .HasColumnName("id_filtro_tipo")
                        .HasColumnType("int");

                    b.Property<string>("NmFiltro")
                        .IsRequired()
                        .HasColumnName("nm_filtro")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte>("NuOrdem")
                        .HasColumnName("nu_ordem")
                        .HasColumnType("tinyint");

                    b.HasKey("IdFiltro");

                    b.HasIndex("IdFiltroTipo");

                    b.ToTable("tb_filtro");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbFiltroTipo", b =>
                {
                    b.Property<int>("IdFiltroTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_filtro_tipo")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdExterno")
                        .HasColumnName("cd_externo")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<string>("NmFiltroTipo")
                        .IsRequired()
                        .HasColumnName("nm_filtro_tipo")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdFiltroTipo");

                    b.ToTable("tb_filtro_tipo");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbFiltroTipoCategoria", b =>
                {
                    b.Property<int>("IdFiltroTipoCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_filtro_tipo_categoria")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("IdCategoria")
                        .HasColumnName("id_categoria")
                        .HasColumnType("int");

                    b.Property<int>("IdDepartamento")
                        .HasColumnName("id_departamento")
                        .HasColumnType("int");

                    b.Property<int>("IdFiltroTipo")
                        .HasColumnName("id_filtro_tipo")
                        .HasColumnType("int");

                    b.Property<int>("IdSecao")
                        .HasColumnName("id_secao")
                        .HasColumnType("int");

                    b.Property<int?>("IdSubcategoria")
                        .HasColumnName("id_subcategoria")
                        .HasColumnType("int");

                    b.HasKey("IdFiltroTipoCategoria");

                    b.HasIndex("IdFiltroTipo");

                    b.ToTable("tb_filtro_tipo_categoria");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbFormaPagamento", b =>
                {
                    b.Property<int>("IdFormaPagamento")
                        .HasColumnName("id_forma_pagamento")
                        .HasColumnType("int");

                    b.Property<string>("DsLogo")
                        .HasColumnName("ds_logo")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("IdFormaPagamentoTipo")
                        .HasColumnName("id_forma_pagamento_tipo")
                        .HasColumnType("int");

                    b.Property<string>("NmFormaPagamento")
                        .IsRequired()
                        .HasColumnName("nm_forma_pagamento")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdFormaPagamento");

                    b.HasIndex("IdFormaPagamentoTipo");

                    b.ToTable("tb_forma_pagamento");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbFormaPagamentoTipo", b =>
                {
                    b.Property<int>("IdFormaPagamentoTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_forma_pagamento_tipo")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NmFormaPagamentoTipo")
                        .IsRequired()
                        .HasColumnName("nm_forma_pagamento_tipo")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdFormaPagamentoTipo");

                    b.ToTable("tb_forma_pagamento_tipo");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbGateway", b =>
                {
                    b.Property<int>("IdGateway")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_gateway")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsMerchantId")
                        .HasColumnName("ds_merchant_id")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DsMerchantKey")
                        .HasColumnName("ds_merchant_key")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsNome")
                        .IsRequired()
                        .HasColumnName("ds_nome")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("FlClearsale")
                        .HasColumnName("fl_clearsale")
                        .HasColumnType("bit");

                    b.Property<bool>("FlProducao")
                        .HasColumnName("fl_producao")
                        .HasColumnType("bit");

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<int>("IdGatewayTipo")
                        .HasColumnName("id_gateway_tipo")
                        .HasColumnType("int");

                    b.HasKey("IdGateway");

                    b.HasIndex("IdGatewayTipo");

                    b.ToTable("tb_gateway");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbGatewayPraca", b =>
                {
                    b.Property<int>("IdGatewayPraca")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_gateway_praca")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdGateway")
                        .HasColumnName("id_gateway")
                        .HasColumnType("int");

                    b.Property<int>("IdPraca")
                        .HasColumnName("id_praca")
                        .HasColumnType("int");

                    b.HasKey("IdGatewayPraca");

                    b.HasIndex("IdGateway");

                    b.HasIndex("IdPraca");

                    b.ToTable("tb_gateway_praca");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbGatewayTipo", b =>
                {
                    b.Property<int>("IdGatewayTipo")
                        .HasColumnName("id_gateway_tipo")
                        .HasColumnType("int");

                    b.Property<string>("DsGatewayTipo")
                        .HasColumnName("ds_gateway_tipo")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdGatewayTipo");

                    b.ToTable("tb_gateway_tipo");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbGatewayTipoFormaPagamento", b =>
                {
                    b.Property<int>("IdGatewayTipoFormaPagamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_gateway_tipo_forma_pagamento")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdFormaPagamento")
                        .HasColumnName("id_forma_pagamento")
                        .HasColumnType("int");

                    b.Property<int>("IdGatewayTipo")
                        .HasColumnName("id_gateway_tipo")
                        .HasColumnType("int");

                    b.HasKey("IdGatewayTipoFormaPagamento");

                    b.HasIndex("IdFormaPagamento");

                    b.HasIndex("IdGatewayTipo");

                    b.HasIndex("IdGatewayTipoFormaPagamento")
                        .HasName("IX_tb_gateway_tipo_forma_pagamento");

                    b.ToTable("tb_gateway_tipo_forma_pagamento");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbGondola", b =>
                {
                    b.Property<int>("IdGondola")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_gondola")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsExibicao")
                        .HasColumnName("ds_exibicao")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtFinal")
                        .HasColumnName("dt_final")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("DtInicial")
                        .HasColumnName("dt_inicial")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<int?>("IdPraca")
                        .HasColumnName("id_praca")
                        .HasColumnType("int");

                    b.Property<string>("NmGondola")
                        .IsRequired()
                        .HasColumnName("nm_gondola")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdGondola");

                    b.ToTable("tb_gondola");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbGondolaProdutoSku", b =>
                {
                    b.Property<int>("IdGondolaProdutoSku")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_gondola_produto_sku")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdGondola")
                        .HasColumnName("id_gondola")
                        .HasColumnType("int");

                    b.Property<int>("IdProdutoSku")
                        .HasColumnName("id_produto_sku")
                        .HasColumnType("int");

                    b.HasKey("IdGondolaProdutoSku");

                    b.HasIndex("IdProdutoSku");

                    b.ToTable("tb_gondola_produto_sku");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbGraficoCockpit", b =>
                {
                    b.Property<int>("IdGraficoCockpit")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_grafico_cockpit")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdAplicativo")
                        .HasColumnName("id_aplicativo")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnName("id_usuario")
                        .HasColumnType("int");

                    b.Property<byte?>("NuOrdem")
                        .HasColumnName("nu_ordem")
                        .HasColumnType("tinyint");

                    b.HasKey("IdGraficoCockpit");

                    b.HasIndex("IdAplicativo");

                    b.HasIndex("IdUsuario");

                    b.ToTable("tb_grafico_cockpit");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbImpAtualizaEstoquePreco", b =>
                {
                    b.Property<int>("IdImportacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_importacao")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("DsMensagem")
                        .IsRequired()
                        .HasColumnName("ds_mensagem")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtImportacao")
                        .HasColumnName("dt_importacao")
                        .HasColumnType("datetime");

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<int?>("IdPraca")
                        .HasColumnName("id_praca")
                        .HasColumnType("int");

                    b.Property<int>("NuEstoque")
                        .HasColumnName("nu_estoque")
                        .HasColumnType("int");

                    b.Property<decimal>("VlProdutoDe")
                        .HasColumnName("vl_produto_de")
                        .HasColumnType("money");

                    b.Property<decimal>("VlProdutoPor")
                        .HasColumnName("vl_produto_por")
                        .HasColumnType("money");

                    b.HasKey("IdImportacao");

                    b.ToTable("tb_imp_atualiza_estoque_preco");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbImpAtualizaTitleMeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .HasColumnName("codigo")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnName("data_atualizacao")
                        .HasColumnType("datetime");

                    b.Property<string>("DsDescription")
                        .HasColumnName("ds_description")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("DsKeywords")
                        .HasColumnName("ds_keywords")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("DsMensagem")
                        .HasColumnName("ds_mensagem")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DsTitle")
                        .HasColumnName("ds_title")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("tb_imp_atualiza_title_meta");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbLayout", b =>
                {
                    b.Property<int>("IdLayout")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_layout")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsImagem")
                        .HasColumnName("ds_imagem")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("NmLayout")
                        .IsRequired()
                        .HasColumnName("nm_layout")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdLayout");

                    b.ToTable("tb_layout");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbLayoutPosicao", b =>
                {
                    b.Property<int>("IdLayoutPosicao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_layout_posicao")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdLayout")
                        .HasColumnName("id_layout")
                        .HasColumnType("int");

                    b.Property<int>("IdPosicao")
                        .HasColumnName("id_posicao")
                        .HasColumnType("int");

                    b.Property<int?>("NuAltura")
                        .HasColumnName("nu_altura")
                        .HasColumnType("int");

                    b.Property<int?>("NuLargura")
                        .HasColumnName("nu_largura")
                        .HasColumnType("int");

                    b.HasKey("IdLayoutPosicao");

                    b.HasIndex("IdLayout");

                    b.HasIndex("IdPosicao");

                    b.ToTable("tb_layout_posicao");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbListaDesejo", b =>
                {
                    b.Property<int>("IdListaDesejo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_lista_desejo")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<int>("IdCliente")
                        .HasColumnName("id_cliente")
                        .HasColumnType("int");

                    b.Property<int>("IdListaDesejoPeriodo")
                        .HasColumnName("id_lista_desejo_periodo")
                        .HasColumnType("int");

                    b.Property<string>("NmListaDesejo")
                        .IsRequired()
                        .HasColumnName("nm_lista_desejo")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdListaDesejo");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdListaDesejoPeriodo");

                    b.ToTable("tb_lista_desejo");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbListaDesejoPeriodo", b =>
                {
                    b.Property<int>("IdListaDesejoPeriodo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_lista_desejo_periodo")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsListaDesejoPeriodo")
                        .IsRequired()
                        .HasColumnName("ds_lista_desejo_periodo")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<int>("NuPeriodo")
                        .HasColumnName("nu_periodo")
                        .HasColumnType("int");

                    b.HasKey("IdListaDesejoPeriodo");

                    b.ToTable("tb_lista_desejo_periodo");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbListaDesejoProdutoSku", b =>
                {
                    b.Property<int>("IdListaDesejoProdutoSku")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_lista_desejo_produto_sku")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdListaDesejo")
                        .HasColumnName("id_lista_desejo")
                        .HasColumnType("int");

                    b.Property<int>("IdProdutoSku")
                        .HasColumnName("id_produto_sku")
                        .HasColumnType("int");

                    b.HasKey("IdListaDesejoProdutoSku");

                    b.HasIndex("IdListaDesejo");

                    b.HasIndex("IdProdutoSku");

                    b.ToTable("tb_lista_desejo_produto_sku");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnName("action")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasColumnName("application")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Creator")
                        .IsRequired()
                        .HasColumnName("creator")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnName("inserted_date")
                        .HasColumnType("datetime");

                    b.Property<string>("IpUser")
                        .IsRequired()
                        .HasColumnName("ip_user")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasColumnType("varchar(90)")
                        .HasMaxLength(90)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("tb_log");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbLogProcedure", b =>
                {
                    b.Property<int>("IdLog")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_log")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsLog")
                        .HasColumnName("ds_log")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime>("DtLog")
                        .HasColumnName("dt_log")
                        .HasColumnType("datetime");

                    b.HasKey("IdLog");

                    b.ToTable("tb_log_procedure");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbLogTelevendas", b =>
                {
                    b.Property<int>("IdLogTelevendas")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_log_televendas")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsAcao")
                        .IsRequired()
                        .HasColumnName("ds_acao")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtCadastro")
                        .HasColumnName("dt_cadastro")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("IdUsuarioTelevendas")
                        .HasColumnName("id_usuario_televendas")
                        .HasColumnType("int");

                    b.HasKey("IdLogTelevendas");

                    b.HasIndex("IdUsuarioTelevendas");

                    b.ToTable("tb_log_televendas");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbLojaEspecial", b =>
                {
                    b.Property<int>("IdLojaEspecial")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_loja_especial")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsArquivoLogo")
                        .HasColumnName("ds_arquivo_logo")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsCor1")
                        .HasColumnName("ds_cor_1")
                        .HasColumnType("char(7)")
                        .IsFixedLength(true)
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<string>("DsCor2")
                        .HasColumnName("ds_cor_2")
                        .HasColumnType("char(7)")
                        .IsFixedLength(true)
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<string>("DsCorFundo")
                        .HasColumnName("ds_cor_fundo")
                        .HasColumnType("char(7)")
                        .IsFixedLength(true)
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<string>("DsSkinFundo")
                        .HasColumnName("ds_skin_fundo")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsSkinRepeat")
                        .HasColumnName("ds_skin_repeat")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<bool>("FlExibeCategorizacaoAuto")
                        .HasColumnName("fl_exibe_categorizacao_auto")
                        .HasColumnType("bit");

                    b.Property<bool>("FlExibeHtml")
                        .HasColumnName("fl_exibe_html")
                        .HasColumnType("bit");

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<string>("NmLojaEspecial")
                        .IsRequired()
                        .HasColumnName("nm_loja_especial")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte>("NuOrdem")
                        .HasColumnName("nu_ordem")
                        .HasColumnType("tinyint");

                    b.Property<string>("TxHtml")
                        .HasColumnName("tx_html")
                        .HasColumnType("text");

                    b.HasKey("IdLojaEspecial");

                    b.ToTable("tb_loja_especial");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbLojaEspecialBanner", b =>
                {
                    b.Property<int>("IdLojaEspecialBanner")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_loja_especial_banner")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsArquivo")
                        .IsRequired()
                        .HasColumnName("ds_arquivo")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsArquivoFundo")
                        .HasColumnName("ds_arquivo_fundo")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsCorFundo")
                        .HasColumnName("ds_cor_fundo")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<string>("DsLink")
                        .IsRequired()
                        .HasColumnName("ds_link")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<int>("IdLojaEspecial")
                        .HasColumnName("id_loja_especial")
                        .HasColumnType("int");

                    b.Property<int>("IdLojaEspecialPosicao")
                        .HasColumnName("id_loja_especial_posicao")
                        .HasColumnType("int");

                    b.Property<byte>("NuOrdem")
                        .HasColumnName("nu_ordem")
                        .HasColumnType("tinyint");

                    b.HasKey("IdLojaEspecialBanner");

                    b.HasIndex("IdLojaEspecial");

                    b.HasIndex("IdLojaEspecialPosicao");

                    b.ToTable("tb_loja_especial_banner");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbLojaEspecialCategoria", b =>
                {
                    b.Property<int>("IdLojaEspecialCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_loja_especial_categoria")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<int>("IdLojaEspecialSecao")
                        .HasColumnName("id_loja_especial_secao")
                        .HasColumnType("int");

                    b.Property<string>("NmCategoria")
                        .IsRequired()
                        .HasColumnName("nm_categoria")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte>("NuOrdem")
                        .HasColumnName("nu_ordem")
                        .HasColumnType("tinyint");

                    b.HasKey("IdLojaEspecialCategoria");

                    b.HasIndex("IdLojaEspecialSecao");

                    b.ToTable("tb_loja_especial_categoria");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbLojaEspecialDepartamento", b =>
                {
                    b.Property<int>("IdLojaEspecialDepartamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_loja_especial_departamento")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<int>("IdLojaEspecial")
                        .HasColumnName("id_loja_especial")
                        .HasColumnType("int");

                    b.Property<string>("NmDepartamento")
                        .IsRequired()
                        .HasColumnName("nm_departamento")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte>("NuOrdem")
                        .HasColumnName("nu_ordem")
                        .HasColumnType("tinyint");

                    b.HasKey("IdLojaEspecialDepartamento");

                    b.HasIndex("IdLojaEspecial");

                    b.ToTable("tb_loja_especial_departamento");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbLojaEspecialMarca", b =>
                {
                    b.Property<int>("IdLojaEspecialMarca")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_loja_especial_marca")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdLojaEspecial")
                        .HasColumnName("id_loja_especial")
                        .HasColumnType("int");

                    b.Property<int>("IdMarca")
                        .HasColumnName("id_marca")
                        .HasColumnType("int");

                    b.HasKey("IdLojaEspecialMarca");

                    b.HasIndex("IdLojaEspecial");

                    b.HasIndex("IdMarca");

                    b.ToTable("tb_loja_especial_marca");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbLojaEspecialPosicao", b =>
                {
                    b.Property<int>("IdLojaEspecialPosicao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_loja_especial_posicao")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NmLojaEspecialPosicao")
                        .IsRequired()
                        .HasColumnName("nm_loja_especial_posicao")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("NuAltura")
                        .HasColumnName("nu_altura")
                        .HasColumnType("int");

                    b.Property<int>("NuLargura")
                        .HasColumnName("nu_largura")
                        .HasColumnType("int");

                    b.HasKey("IdLojaEspecialPosicao");

                    b.ToTable("tb_loja_especial_posicao");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbLojaEspecialProduto", b =>
                {
                    b.Property<int>("IdLojaEspecialProduto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_loja_especial_produto")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdLojaEspecial")
                        .HasColumnName("id_loja_especial")
                        .HasColumnType("int");

                    b.Property<int?>("IdLojaEspecialCategoria")
                        .HasColumnName("id_loja_especial_categoria")
                        .HasColumnType("int");

                    b.Property<int>("IdLojaEspecialDepartamento")
                        .HasColumnName("id_loja_especial_departamento")
                        .HasColumnType("int");

                    b.Property<int?>("IdLojaEspecialSecao")
                        .HasColumnName("id_loja_especial_secao")
                        .HasColumnType("int");

                    b.Property<int>("IdProduto")
                        .HasColumnName("id_produto")
                        .HasColumnType("int");

                    b.HasKey("IdLojaEspecialProduto");

                    b.HasIndex("IdLojaEspecial");

                    b.HasIndex("IdLojaEspecialCategoria");

                    b.HasIndex("IdLojaEspecialDepartamento");

                    b.HasIndex("IdLojaEspecialSecao");

                    b.HasIndex("IdProduto");

                    b.ToTable("tb_loja_especial_produto");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbLojaEspecialSecao", b =>
                {
                    b.Property<int>("IdLojaEspecialSecao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_loja_especial_secao")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<int>("IdLojaEspecialDepartamento")
                        .HasColumnName("id_loja_especial_departamento")
                        .HasColumnType("int");

                    b.Property<string>("NmSecao")
                        .IsRequired()
                        .HasColumnName("nm_secao")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte>("NuOrdem")
                        .HasColumnName("nu_ordem")
                        .HasColumnType("tinyint");

                    b.HasKey("IdLojaEspecialSecao");

                    b.HasIndex("IdLojaEspecialDepartamento");

                    b.ToTable("tb_loja_especial_secao");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbLojaEspecialVitrine", b =>
                {
                    b.Property<int>("IdLojaEspecialVitrine")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_loja_especial_vitrine")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<int>("IdLojaEspecial")
                        .HasColumnName("id_loja_especial")
                        .HasColumnType("int");

                    b.Property<string>("NmVitrine")
                        .IsRequired()
                        .HasColumnName("nm_vitrine")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte>("NuOrdem")
                        .HasColumnName("nu_ordem")
                        .HasColumnType("tinyint");

                    b.HasKey("IdLojaEspecialVitrine");

                    b.HasIndex("IdLojaEspecial");

                    b.ToTable("tb_loja_especial_vitrine");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbLojaEspecialVitrineProduto", b =>
                {
                    b.Property<int>("IdLojaEspecialVitrineProduto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_loja_especial_vitrine_produto")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdLojaEspecialVitrine")
                        .HasColumnName("id_loja_especial_vitrine")
                        .HasColumnType("int");

                    b.Property<int>("IdProduto")
                        .HasColumnName("id_produto")
                        .HasColumnType("int");

                    b.Property<byte>("NuOrdem")
                        .HasColumnName("nu_ordem")
                        .HasColumnType("tinyint");

                    b.HasKey("IdLojaEspecialVitrineProduto");

                    b.HasIndex("IdLojaEspecialVitrine");

                    b.HasIndex("IdProduto");

                    b.ToTable("tb_loja_especial_vitrine_produto");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbLojaFisica", b =>
                {
                    b.Property<int>("IdLojaFisica")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_loja_fisica")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsBairro")
                        .IsRequired()
                        .HasColumnName("ds_bairro")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("DsCep")
                        .IsRequired()
                        .HasColumnName("ds_cep")
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("DsCidade")
                        .IsRequired()
                        .HasColumnName("ds_cidade")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("DsEndereco")
                        .IsRequired()
                        .HasColumnName("ds_endereco")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("DsEstado")
                        .IsRequired()
                        .HasColumnName("ds_estado")
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("DsGoogleMaps")
                        .HasColumnName("ds_google_maps")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("DsImagemDestaque")
                        .IsRequired()
                        .HasColumnName("ds_imagem_destaque")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("DsNumero")
                        .HasColumnName("ds_numero")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DsSinopse")
                        .HasColumnName("ds_sinopse")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<string>("NmLojaFisica")
                        .IsRequired()
                        .HasColumnName("nm_loja_fisica")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("TxConteudo")
                        .IsRequired()
                        .HasColumnName("tx_conteudo")
                        .HasColumnType("text");

                    b.HasKey("IdLojaFisica");

                    b.ToTable("tb_loja_fisica");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbMapeamentoUrl", b =>
                {
                    b.Property<int>("IdMapeamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_mapeamento")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DsResposta")
                        .HasColumnName("ds_resposta")
                        .HasColumnType("int");

                    b.Property<string>("DsUrlDe")
                        .IsRequired()
                        .HasColumnName("ds_url_de")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("DsUrlPara")
                        .IsRequired()
                        .HasColumnName("ds_url_para")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DtFinal")
                        .HasColumnName("dt_final")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DtInicial")
                        .HasColumnName("dt_inicial")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.HasKey("IdMapeamento");

                    b.ToTable("tb_mapeamento_url");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbMarca", b =>
                {
                    b.Property<int>("IdMarca")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_marca")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdExterno")
                        .HasColumnName("cd_externo")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("DsImagem")
                        .HasColumnName("ds_imagem")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_cadastro")
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("FlExibeImagem")
                        .HasColumnName("fl_exibe_imagem")
                        .HasColumnType("bit");

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<int?>("IdMarcaVannon")
                        .HasColumnName("id_marca_vannon")
                        .HasColumnType("int");

                    b.Property<string>("NmMarca")
                        .IsRequired()
                        .HasColumnName("nm_marca")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("IdMarca");

                    b.ToTable("tb_marca");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbMensagem", b =>
                {
                    b.Property<int>("IdMensagem")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_mensagem")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdExterno")
                        .HasColumnName("cd_externo")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("DsMensagem")
                        .IsRequired()
                        .HasColumnName("ds_mensagem")
                        .HasColumnType("varchar(3000)")
                        .HasMaxLength(3000)
                        .IsUnicode(false);

                    b.Property<string>("DsTitulo")
                        .HasColumnName("ds_titulo")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtFim")
                        .HasColumnName("dt_fim")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("DtInicio")
                        .HasColumnName("dt_inicio")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.HasKey("IdMensagem");

                    b.ToTable("tb_mensagem");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbMensagemCategoria", b =>
                {
                    b.Property<int>("IdMensagemCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_mensagem_categoria")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BackofficeCategoria")
                        .HasColumnName("backoffice_categoria")
                        .HasColumnType("int");

                    b.Property<int?>("BackofficeDepartamento")
                        .HasColumnName("backoffice_departamento")
                        .HasColumnType("int");

                    b.Property<int?>("BackofficeSecao")
                        .HasColumnName("backoffice_secao")
                        .HasColumnType("int");

                    b.Property<int?>("BackofficeSubcategoria")
                        .HasColumnName("backoffice_subcategoria")
                        .HasColumnType("int");

                    b.Property<int?>("IdCategoria")
                        .HasColumnName("id_categoria")
                        .HasColumnType("int");

                    b.Property<int>("IdMensagem")
                        .HasColumnName("id_mensagem")
                        .HasColumnType("int");

                    b.HasKey("IdMensagemCategoria");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdMensagem");

                    b.ToTable("tb_mensagem_categoria");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbMensagemMarca", b =>
                {
                    b.Property<int>("IdMensagemMarca")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_mensagem_marca")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdMarca")
                        .HasColumnName("id_marca")
                        .HasColumnType("int");

                    b.Property<int>("IdMensagem")
                        .HasColumnName("id_mensagem")
                        .HasColumnType("int");

                    b.HasKey("IdMensagemMarca");

                    b.HasIndex("IdMarca");

                    b.HasIndex("IdMensagem");

                    b.ToTable("tb_mensagem_marca");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbMensagemPrincipioAtivo", b =>
                {
                    b.Property<int>("IdMensagemPrincipioAtivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_mensagem_principio_ativo")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdMensagem")
                        .HasColumnName("id_mensagem")
                        .HasColumnType("int");

                    b.Property<int>("IdPrincipioAtivo")
                        .HasColumnName("id_principio_ativo")
                        .HasColumnType("int");

                    b.HasKey("IdMensagemPrincipioAtivo");

                    b.HasIndex("IdMensagem");

                    b.HasIndex("IdPrincipioAtivo");

                    b.ToTable("tb_mensagem_principio_ativo");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbMensagemProdutoControle", b =>
                {
                    b.Property<int>("IdMensagemProdutoControle")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_mensagem_produto_controle")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdMensagem")
                        .HasColumnName("id_mensagem")
                        .HasColumnType("int");

                    b.Property<int>("IdProdutoControle")
                        .HasColumnName("id_produto_controle")
                        .HasColumnType("int");

                    b.HasKey("IdMensagemProdutoControle");

                    b.HasIndex("IdMensagem");

                    b.HasIndex("IdProdutoControle");

                    b.ToTable("tb_mensagem_produto_controle");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbMensagemProdutoFamilia", b =>
                {
                    b.Property<int>("IdMensagemProdutoFamilia")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_mensagem_produto_familia")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdMensagem")
                        .HasColumnName("id_mensagem")
                        .HasColumnType("int");

                    b.Property<int>("IdProdutoFamilia")
                        .HasColumnName("id_produto_familia")
                        .HasColumnType("int");

                    b.HasKey("IdMensagemProdutoFamilia");

                    b.HasIndex("IdMensagem");

                    b.HasIndex("IdProdutoFamilia");

                    b.ToTable("tb_mensagem_produto_familia");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbMensagemProdutoTipo", b =>
                {
                    b.Property<int>("IdMensagemProdutoTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_mensagem_produto_tipo")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdMensagem")
                        .HasColumnName("id_mensagem")
                        .HasColumnType("int");

                    b.Property<int>("IdProdutoTipo")
                        .HasColumnName("id_produto_tipo")
                        .HasColumnType("int");

                    b.HasKey("IdMensagemProdutoTipo");

                    b.HasIndex("IdMensagem");

                    b.HasIndex("IdProdutoTipo");

                    b.ToTable("tb_mensagem_produto_tipo");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbModalidadeEntrega", b =>
                {
                    b.Property<int>("IdModalidadeEntrega")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_modalidade_entrega")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdEmpresaCorreios")
                        .HasColumnName("cd_empresa_correios")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CdEmpresaTotalexpress")
                        .HasColumnName("cd_empresa_totalexpress")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CdExterno")
                        .HasColumnName("cd_externo")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("DsMensagem")
                        .HasColumnName("ds_mensagem")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("DsSenhaCorreios")
                        .HasColumnName("ds_senha_correios")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DsSenhaTotalexpress")
                        .HasColumnName("ds_senha_totalexpress")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DsUrlRastreamento")
                        .HasColumnName("ds_url_rastreamento")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<bool?>("FlAvisoRecebimento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fl_aviso_recebimento")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("FlCashondeliveryTotalexpress")
                        .HasColumnName("fl_cashondelivery_totalexpress")
                        .HasColumnType("bit");

                    b.Property<bool>("FlCorreiosAutomatico")
                        .HasColumnName("fl_correios_automatico")
                        .HasColumnType("bit");

                    b.Property<bool>("FlEntregaAgendada")
                        .HasColumnName("fl_entrega_agendada")
                        .HasColumnType("bit");

                    b.Property<bool?>("FlMaoPropria")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fl_mao_propria")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<bool?>("FlTotalexpressAutomatico")
                        .HasColumnName("fl_totalexpress_automatico")
                        .HasColumnType("bit");

                    b.Property<bool>("FlUtilizarFaixaCep")
                        .HasColumnName("fl_utilizar_faixa_cep")
                        .HasColumnType("bit");

                    b.Property<bool?>("FlValorDeclarado")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fl_valor_declarado")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("IdModalidadeEntregaTipo")
                        .HasColumnName("id_modalidade_entrega_tipo")
                        .HasColumnType("int");

                    b.Property<int?>("IdPraca")
                        .HasColumnName("id_praca")
                        .HasColumnType("int");

                    b.Property<int?>("IdServicoCorreios")
                        .HasColumnName("id_servico_correios")
                        .HasColumnType("int");

                    b.Property<int?>("IdServicoTotalexpress")
                        .HasColumnName("id_servico_totalexpress")
                        .HasColumnType("int");

                    b.Property<string>("NmModalidadeEntrega")
                        .IsRequired()
                        .HasColumnName("nm_modalidade_entrega")
                        .HasColumnType("varchar(82)")
                        .HasMaxLength(82)
                        .IsUnicode(false);

                    b.Property<decimal>("NuIcms")
                        .HasColumnName("nu_icms")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PcSeguro")
                        .HasColumnName("pc_seguro")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("VlCubagem")
                        .HasColumnName("vl_cubagem")
                        .HasColumnType("money");

                    b.HasKey("IdModalidadeEntrega");

                    b.HasIndex("IdPraca");

                    b.HasIndex("IdServicoCorreios");

                    b.ToTable("tb_modalidade_entrega");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbModalidadeEntregaAgenda", b =>
                {
                    b.Property<int>("IdModalidadeEntregaAgenda")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_modalidade_entrega_agenda")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DtHorarioFinal")
                        .HasColumnName("dt_horario_final")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("DtHorarioInicio")
                        .HasColumnName("dt_horario_inicio")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("IdDiaSemana")
                        .HasColumnName("id_dia_semana")
                        .HasColumnType("int");

                    b.Property<int>("IdModalidadeEntrega")
                        .HasColumnName("id_modalidade_entrega")
                        .HasColumnType("int");

                    b.Property<decimal?>("VlAdicional")
                        .HasColumnName("vl_adicional")
                        .HasColumnType("money");

                    b.HasKey("IdModalidadeEntregaAgenda");

                    b.HasIndex("IdDiaSemana");

                    b.HasIndex("IdModalidadeEntrega");

                    b.ToTable("tb_modalidade_entrega_agenda");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbModalidadeEntregaCep", b =>
                {
                    b.Property<int>("IdModalidadeEntregaCep")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_modalidade_entrega_cep")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsBairro")
                        .HasColumnName("ds_bairro")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsCepFinal")
                        .IsRequired()
                        .HasColumnName("ds_cep_final")
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("DsCepInicial")
                        .IsRequired()
                        .HasColumnName("ds_cep_inicial")
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("DsCidade")
                        .HasColumnName("ds_cidade")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsEstado")
                        .HasColumnName("ds_estado")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("DsMensagem")
                        .HasColumnName("ds_mensagem")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("IdModalidadeEntrega")
                        .HasColumnName("id_modalidade_entrega")
                        .HasColumnType("int");

                    b.Property<decimal>("NuPesoFinal")
                        .HasColumnName("nu_peso_final")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("NuPesoInicial")
                        .HasColumnName("nu_peso_inicial")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int>("NuPrazoEntrega")
                        .HasColumnName("nu_prazo_entrega")
                        .HasColumnType("int");

                    b.Property<decimal?>("VlAdicionalGrama")
                        .HasColumnName("vl_adicional_grama")
                        .HasColumnType("money");

                    b.Property<decimal>("VlFrete")
                        .HasColumnName("vl_frete")
                        .HasColumnType("money");

                    b.HasKey("IdModalidadeEntregaCep");

                    b.HasIndex("IdModalidadeEntrega");

                    b.HasIndex("DsCepFinal", "DsCepInicial", "NuPesoFinal", "NuPesoInicial", "VlAdicionalGrama", "IdModalidadeEntrega")
                        .HasName("IX_modalidade_cep_inicial");

                    b.ToTable("tb_modalidade_entrega_cep");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbModalidadeEntregaLoja", b =>
                {
                    b.Property<int>("IdModalidadeEntregaLoja")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_modalidade_entrega_loja")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsBairro")
                        .IsRequired()
                        .HasColumnName("ds_bairro")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DsCep")
                        .IsRequired()
                        .HasColumnName("ds_cep")
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("DsCidade")
                        .IsRequired()
                        .HasColumnName("ds_cidade")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DsComplemento")
                        .IsRequired()
                        .HasColumnName("ds_complemento")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DsEndereco")
                        .IsRequired()
                        .HasColumnName("ds_endereco")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DsEstado")
                        .IsRequired()
                        .HasColumnName("ds_estado")
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("DsNumero")
                        .IsRequired()
                        .HasColumnName("ds_numero")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("DsTelefone")
                        .HasColumnName("ds_telefone")
                        .HasColumnType("varchar(11)")
                        .HasMaxLength(11)
                        .IsUnicode(false);

                    b.Property<int>("IdModalidadeEntrega")
                        .HasColumnName("id_modalidade_entrega")
                        .HasColumnType("int");

                    b.HasKey("IdModalidadeEntregaLoja");

                    b.HasIndex("IdModalidadeEntrega");

                    b.ToTable("tb_modalidade_entrega_loja");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbModalidadeEntregaRestricao", b =>
                {
                    b.Property<int>("IdModalidadeEntregaRestricao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_modalidade_entrega_restricao")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsCepFinal")
                        .IsRequired()
                        .HasColumnName("ds_cep_final")
                        .HasColumnType("char(8)")
                        .IsFixedLength(true)
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("DsCepInicial")
                        .IsRequired()
                        .HasColumnName("ds_cep_inicial")
                        .HasColumnType("char(8)")
                        .IsFixedLength(true)
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("DsMensagem")
                        .IsRequired()
                        .HasColumnName("ds_mensagem")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<bool>("FlAtende")
                        .HasColumnName("fl_atende")
                        .HasColumnType("bit");

                    b.Property<bool>("FlConsideraHorario")
                        .HasColumnName("fl_considera_horario")
                        .HasColumnType("bit");

                    b.Property<int>("IdModalidadeEntrega")
                        .HasColumnName("id_modalidade_entrega")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NuHorarioFinal")
                        .HasColumnName("nu_horario_final")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("NuHorarioInicial")
                        .HasColumnName("nu_horario_inicial")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("NuHorasAcrescimo")
                        .HasColumnName("nu_horas_acrescimo")
                        .HasColumnType("int");

                    b.Property<decimal?>("PcAcrescimoTarifa")
                        .HasColumnName("pc_acrescimo_tarifa")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("IdModalidadeEntregaRestricao");

                    b.HasIndex("IdModalidadeEntrega");

                    b.ToTable("tb_modalidade_entrega_restricao");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbModalidadeEntregaTipo", b =>
                {
                    b.Property<int>("IdModalidadeEntregaTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_modalidade_entrega_tipo")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdExterno")
                        .HasColumnName("cd_externo")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("DsModalidadeEntregaTipo")
                        .IsRequired()
                        .HasColumnName("ds_modalidade_entrega_tipo")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdModalidadeEntregaTipo");

                    b.ToTable("tb_modalidade_entrega_tipo");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbNewsletter", b =>
                {
                    b.Property<int>("IdNewsletter")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_newsletter")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsEmail")
                        .IsRequired()
                        .HasColumnName("ds_email")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_cadastro")
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit")
                        .HasComment("0 - Inativo / 1- Ativo");

                    b.Property<string>("NmContato")
                        .IsRequired()
                        .HasColumnName("nm_contato")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("IdNewsletter");

                    b.ToTable("tb_newsletter");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbOfertaEspecial", b =>
                {
                    b.Property<int>("IdOfertaEspecial")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_oferta_especial")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdProduto")
                        .HasColumnName("id_produto")
                        .HasColumnType("int");

                    b.Property<byte>("NuOrdem")
                        .HasColumnName("nu_ordem")
                        .HasColumnType("tinyint");

                    b.HasKey("IdOfertaEspecial");

                    b.HasIndex("IdProduto");

                    b.ToTable("tb_oferta_especial");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPagamento", b =>
                {
                    b.Property<int>("IdPagamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_pagamento")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsInstrucaoPagamento")
                        .HasColumnName("ds_instrucao_pagamento")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<int>("IdFormaPagamento")
                        .HasColumnName("id_forma_pagamento")
                        .HasColumnType("int");

                    b.Property<string>("NmPagamento")
                        .IsRequired()
                        .HasColumnName("nm_pagamento")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("NuVencimentoPagamento")
                        .HasColumnName("nu_vencimento_pagamento")
                        .HasColumnType("int");

                    b.Property<decimal>("VlTrocoMaximo")
                        .HasColumnName("vl_troco_maximo")
                        .HasColumnType("money");

                    b.HasKey("IdPagamento");

                    b.HasIndex("IdFormaPagamento");

                    b.ToTable("tb_pagamento");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPagamentoGateway", b =>
                {
                    b.Property<int>("IdPagamentoGateway")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_pagamento_gateway")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdGateway")
                        .HasColumnName("id_gateway")
                        .HasColumnType("int");

                    b.Property<int>("IdPagamento")
                        .HasColumnName("id_pagamento")
                        .HasColumnType("int");

                    b.HasKey("IdPagamentoGateway");

                    b.HasIndex("IdGateway");

                    b.HasIndex("IdPagamento");

                    b.ToTable("tb_pagamento_gateway");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPagamentoParcela", b =>
                {
                    b.Property<int>("IdPagamentoParcela")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_pagamento_parcela")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdPagamento")
                        .HasColumnName("id_pagamento")
                        .HasColumnType("int");

                    b.Property<string>("NmPagamentoParcela")
                        .IsRequired()
                        .HasColumnName("nm_pagamento_parcela")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("NuParcela")
                        .HasColumnName("nu_parcela")
                        .HasColumnType("int");

                    b.Property<decimal>("VlDesconto")
                        .HasColumnName("VL_DESCONTO")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("VlJurosMes")
                        .HasColumnName("vl_juros_mes")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("VlParcelaMinima")
                        .HasColumnName("vl_parcela_minima")
                        .HasColumnType("money");

                    b.HasKey("IdPagamentoParcela");

                    b.HasIndex("IdPagamento");

                    b.ToTable("tb_pagamento_parcela");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbParceiro", b =>
                {
                    b.Property<int>("IdParceiro")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_parceiro")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdExterno")
                        .HasColumnName("cd_externo")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DsLink")
                        .HasColumnName("ds_link")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("DsLogo")
                        .HasColumnName("ds_logo")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("DsParceiro")
                        .HasColumnName("ds_parceiro")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_cadastro")
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DtGeracaoArquivo")
                        .HasColumnName("dt_geracao_arquivo")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("FlComparador")
                        .HasColumnName("fl_comparador")
                        .HasColumnType("bit");

                    b.Property<string>("NmParceiro")
                        .IsRequired()
                        .HasColumnName("nm_parceiro")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("NuQtdeProdutoSku")
                        .HasColumnName("nu_qtde_produto_sku")
                        .HasColumnType("int");

                    b.HasKey("IdParceiro");

                    b.ToTable("tb_parceiro");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbParceiroXmlProduto", b =>
                {
                    b.Property<int>("IdParceiroXmlProduto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_parceiro_xml_produto")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdParceiro")
                        .HasColumnName("id_parceiro")
                        .HasColumnType("int");

                    b.Property<int>("IdProdutoSku")
                        .HasColumnName("id_produto_sku")
                        .HasColumnType("int");

                    b.HasKey("IdParceiroXmlProduto");

                    b.HasIndex("IdParceiro");

                    b.HasIndex("IdProdutoSku");

                    b.ToTable("tb_parceiro_xml_produto");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPedidoGestaoRisco", b =>
                {
                    b.Property<int>("IdGestaoRisco")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_gestao_risco")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsMensagem")
                        .HasColumnName("ds_mensagem")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("DsMetodoComunicacao")
                        .HasColumnName("ds_metodo_comunicacao")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("DsScore")
                        .HasColumnName("ds_score")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("DsSessionId")
                        .HasColumnName("ds_session_id")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("DsStatus")
                        .HasColumnName("ds_status")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("DsStatusCode")
                        .HasColumnName("ds_status_code")
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2);

                    b.Property<string>("DsTransacao")
                        .HasColumnName("ds_transacao")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DsXmlRetorno")
                        .HasColumnName("ds_xml_retorno")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime>("DtOcorrencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_ocorrencia")
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("FlEnviado")
                        .HasColumnName("fl_enviado")
                        .HasColumnType("bit");

                    b.Property<int>("IdPedido")
                        .HasColumnName("id_pedido")
                        .HasColumnType("int");

                    b.HasKey("IdGestaoRisco");

                    b.ToTable("tb_pedido_gestao_risco");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPedidoHistorico", b =>
                {
                    b.Property<int>("IdPedidoHistorico")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_pedido_historico")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsHistorico")
                        .IsRequired()
                        .HasColumnName("ds_historico")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtCadastro")
                        .HasColumnName("dt_cadastro")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("IdPedido")
                        .HasColumnName("id_pedido")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnName("id_usuario")
                        .HasColumnType("int");

                    b.HasKey("IdPedidoHistorico");

                    b.HasIndex("IdPedido");

                    b.HasIndex("IdUsuario");

                    b.ToTable("tb_pedido_historico");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPedidoLog", b =>
                {
                    b.Property<int>("IdPedidoLog")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_pedido_log")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsOrigem")
                        .HasColumnName("ds_origem")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtCadastro")
                        .HasColumnName("dt_cadastro")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("IdPedido")
                        .HasColumnName("id_pedido")
                        .HasColumnType("int");

                    b.Property<int>("IdPedidoStatusAnterior")
                        .HasColumnName("id_pedido_status_anterior")
                        .HasColumnType("int");

                    b.Property<int>("IdPedidoStatusAtual")
                        .HasColumnName("id_pedido_status_atual")
                        .HasColumnType("int");

                    b.Property<int?>("IdUsuario")
                        .HasColumnName("id_usuario")
                        .HasColumnType("int");

                    b.HasKey("IdPedidoLog");

                    b.HasIndex("IdPedido");

                    b.HasIndex("IdPedidoStatusAnterior");

                    b.HasIndex("IdPedidoStatusAtual");

                    b.HasIndex("IdUsuario");

                    b.ToTable("tb_pedido_log");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPedidoOrigem", b =>
                {
                    b.Property<int>("IdPedidoOrigem")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_pedido_origem")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NmPedidoOrigem")
                        .IsRequired()
                        .HasColumnName("nm_pedido_origem")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdPedidoOrigem");

                    b.ToTable("tb_pedido_origem");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPedidoPagamentoLog", b =>
                {
                    b.Property<int>("IdPedidoPagamentoLog")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_pedido_pagamento_log")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsMensagem")
                        .HasColumnName("ds_mensagem")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DtLog")
                        .HasColumnName("dt_log")
                        .HasColumnType("datetime");

                    b.Property<int>("IdPedido")
                        .HasColumnName("id_pedido")
                        .HasColumnType("int");

                    b.Property<string>("XmlEnvio")
                        .HasColumnName("xml_envio")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("XmlRetorno")
                        .HasColumnName("xml_retorno")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("IdPedidoPagamentoLog");

                    b.HasIndex("IdPedido");

                    b.ToTable("tb_pedido_pagamento_log");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPedidoProdutoKit", b =>
                {
                    b.Property<int>("IdPedidoProdutoKit")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_pedido_produto_kit")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdPedidoProdutoSku")
                        .HasColumnName("id_pedido_produto_sku")
                        .HasColumnType("int");

                    b.Property<int>("IdProdutoItem")
                        .HasColumnName("id_produto_item")
                        .HasColumnType("int");

                    b.Property<int>("NuQuantidade")
                        .HasColumnName("nu_quantidade")
                        .HasColumnType("int");

                    b.HasKey("IdPedidoProdutoKit");

                    b.HasIndex("IdPedidoProdutoSku");

                    b.HasIndex("IdProdutoItem");

                    b.ToTable("tb_pedido_produto_kit");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPedidoSevenpdv", b =>
                {
                    b.Property<int>("IdPedidoSevenpdv")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_pedido_sevenpdv")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsEfetiva")
                        .HasColumnName("ds_efetiva")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("DsFinaliza")
                        .HasColumnName("ds_finaliza")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("DsPreauth")
                        .HasColumnName("ds_preauth")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("DtAlteracao")
                        .HasColumnName("dt_alteracao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DtCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_criacao")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("FlEfetivado")
                        .HasColumnName("fl_efetivado")
                        .HasColumnType("bit");

                    b.Property<int>("IdPedido")
                        .HasColumnName("id_pedido")
                        .HasColumnType("int");

                    b.HasKey("IdPedidoSevenpdv")
                        .HasName("PK__tb_pedid__09E15CF271C95D1E");

                    b.HasIndex("IdPedido");

                    b.ToTable("tb_pedido_sevenpdv");

                    b.HasComment("Tabela que guardas as requisições da sevenpdv");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPedidoStatus", b =>
                {
                    b.Property<int>("IdPedidoStatus")
                        .HasColumnName("id_pedido_status")
                        .HasColumnType("int");

                    b.Property<string>("CdExterno")
                        .HasColumnName("cd_externo")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("FlVendido")
                        .HasColumnName("fl_vendido")
                        .HasColumnType("bit");

                    b.Property<string>("NmPedidoStatus")
                        .IsRequired()
                        .HasColumnName("nm_pedido_status")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdPedidoStatus");

                    b.ToTable("tb_pedido_status");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPedidoStatusPbm", b =>
                {
                    b.Property<int>("IdPedidoStatusPbm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_pedido_status_pbm")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CdExterno")
                        .HasColumnName("cd_externo")
                        .HasColumnType("int");

                    b.Property<string>("DsDescricao")
                        .HasColumnName("ds_descricao")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DtAlteracao")
                        .HasColumnName("dt_alteracao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DtInclusao")
                        .HasColumnName("dt_inclusao")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdAutorizador")
                        .HasColumnName("id_autorizador")
                        .HasColumnType("int");

                    b.HasKey("IdPedidoStatusPbm");

                    b.HasIndex("CdExterno")
                        .IsUnique()
                        .HasName("EX_tb_pedido_status_pbm");

                    b.ToTable("tb_pedido_status_pbm");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPosicao", b =>
                {
                    b.Property<int>("IdPosicao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_posicao")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NmPosicao")
                        .IsRequired()
                        .HasColumnName("nm_posicao")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdPosicao");

                    b.ToTable("tb_posicao");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPracaCep", b =>
                {
                    b.Property<int>("IdPracaCep")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_praca_cep")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsBairro")
                        .HasColumnName("ds_bairro")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsCepFinal")
                        .IsRequired()
                        .HasColumnName("ds_cep_final")
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("DsCepInicial")
                        .IsRequired()
                        .HasColumnName("ds_cep_inicial")
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("DsCidade")
                        .HasColumnName("ds_cidade")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsDdd")
                        .HasColumnName("ds_ddd")
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("DsEstado")
                        .HasColumnName("ds_estado")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<int>("IdPraca")
                        .HasColumnName("id_praca")
                        .HasColumnType("int");

                    b.HasKey("IdPracaCep");

                    b.HasIndex("IdPraca");

                    b.ToTable("tb_praca_cep");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPrincipioAtivo", b =>
                {
                    b.Property<int>("IdPrincipioAtivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_principio_ativo")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdExterno")
                        .HasColumnName("cd_externo")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("DsPrincipioAtivo")
                        .HasColumnName("ds_principio_ativo")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("IdPrincipioAtivoVannon")
                        .HasColumnName("id_principio_ativo_vannon")
                        .HasColumnType("int");

                    b.HasKey("IdPrincipioAtivo");

                    b.ToTable("tb_principio_ativo");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProduto", b =>
                {
                    b.Property<int>("IdProduto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdExterno")
                        .HasColumnName("cd_externo")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("DsArquivoBula")
                        .HasColumnName("ds_arquivo_bula")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsCurvaAbc")
                        .HasColumnName("ds_curva_abc")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("DsDescricaoCurta")
                        .HasColumnName("ds_descricao_curta")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsPalavraChave")
                        .HasColumnName("ds_palavra_chave")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("DsUrlVideo")
                        .HasColumnName("ds_url_video")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_cadastro")
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DtLancamentoFinal")
                        .HasColumnName("dt_lancamento_final")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DtLancamentoInicial")
                        .HasColumnName("dt_lancamento_inicial")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DtPreVenda")
                        .HasColumnName("dt_pre_venda")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("FlLancamento")
                        .HasColumnName("fl_lancamento")
                        .HasColumnType("bit");

                    b.Property<int>("FlPerfil")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fl_perfil")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("FlPreVenda")
                        .HasColumnName("fl_pre_venda")
                        .HasColumnType("bit");

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<int>("IdMarca")
                        .HasColumnName("id_marca")
                        .HasColumnType("int");

                    b.Property<int?>("IdProdutoControle")
                        .HasColumnName("id_produto_controle")
                        .HasColumnType("int");

                    b.Property<int?>("IdProdutoFamilia")
                        .HasColumnName("id_produto_familia")
                        .HasColumnType("int");

                    b.Property<string>("IdProdutoSap")
                        .HasColumnName("id_produto_sap")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("IdProdutoTipo")
                        .HasColumnName("id_produto_tipo")
                        .HasColumnType("int");

                    b.Property<int?>("IdProdutoVannon")
                        .HasColumnName("id_produto_vannon")
                        .HasColumnType("int");

                    b.Property<string>("NmProduto")
                        .HasColumnName("nm_produto")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("NuClick")
                        .HasColumnName("nu_click")
                        .HasColumnType("int");

                    b.HasKey("IdProduto");

                    b.HasIndex("IdMarca");

                    b.HasIndex("IdProdutoControle");

                    b.HasIndex("IdProdutoFamilia");

                    b.HasIndex("IdProdutoTipo");

                    b.HasIndex("IdProduto", "IdMarca")
                        .HasName("ix_produto_marca");

                    b.HasIndex("IdProduto", "NmProduto")
                        .HasName("ix_produto_nm_produto");

                    b.ToTable("tb_produto");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoAtrStagging", b =>
                {
                    b.Property<int>("IdProdutoAtrStagging")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto_atr_stagging")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdBarras")
                        .HasColumnName("cd_barras")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CdMs")
                        .HasColumnName("cd_ms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdProduto")
                        .HasColumnName("id_produto")
                        .HasColumnType("int");

                    b.Property<string>("NmProduto")
                        .HasColumnName("nm_produto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NmProdutoSku")
                        .HasColumnName("nm_produto_sku")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NuAltura")
                        .HasColumnName("nu_altura")
                        .HasColumnType("int");

                    b.Property<int>("NuLargura")
                        .HasColumnName("nu_largura")
                        .HasColumnType("int");

                    b.Property<decimal>("NuPeso")
                        .HasColumnName("nu_peso")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("NuProfundidade")
                        .HasColumnName("nu_profundidade")
                        .HasColumnType("int");

                    b.HasKey("IdProdutoAtrStagging")
                        .HasName("PK_tb_atr_stagging");

                    b.ToTable("tb_produto_atr_stagging");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoAvaliacao", b =>
                {
                    b.Property<int>("IdProdutoAvaliacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto_avaliacao")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsComentario")
                        .IsRequired()
                        .HasColumnName("ds_comentario")
                        .HasColumnType("varchar(400)")
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.Property<string>("DsTitulo")
                        .IsRequired()
                        .HasColumnName("ds_titulo")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DtAprovacao")
                        .HasColumnName("dt_aprovacao")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("DtCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_cadastro")
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("tinyint")
                        .HasComment("0 -Pendente / 1 - Aprovado / 2- Reprovado");

                    b.Property<int>("IdCliente")
                        .HasColumnName("id_cliente")
                        .HasColumnType("int");

                    b.Property<int>("IdProduto")
                        .HasColumnName("id_produto")
                        .HasColumnType("int");

                    b.Property<byte>("NuAvaliacao")
                        .HasColumnName("nu_avaliacao")
                        .HasColumnType("tinyint");

                    b.HasKey("IdProdutoAvaliacao");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdProduto");

                    b.ToTable("tb_produto_avaliacao");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoCategoria", b =>
                {
                    b.Property<int>("IdProdutoCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto_categoria")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("FlPrincipal")
                        .HasColumnName("fl_principal")
                        .HasColumnType("bit");

                    b.Property<int?>("IdCategoria")
                        .HasColumnName("id_categoria")
                        .HasColumnType("int");

                    b.Property<int>("IdDepartamento")
                        .HasColumnName("id_departamento")
                        .HasColumnType("int");

                    b.Property<int>("IdProduto")
                        .HasColumnName("id_produto")
                        .HasColumnType("int");

                    b.Property<int>("IdSecao")
                        .HasColumnName("id_secao")
                        .HasColumnType("int");

                    b.Property<int?>("IdSubcategoria")
                        .HasColumnName("id_subcategoria")
                        .HasColumnType("int");

                    b.HasKey("IdProdutoCategoria");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdDepartamento");

                    b.HasIndex("IdSecao");

                    b.HasIndex("IdSubcategoria");

                    b.HasIndex("IdProduto", "FlPrincipal")
                        .HasName("ix_produto_categoria_id_produto_fl_principal");

                    b.HasIndex("IdProduto", "IdSecao")
                        .HasName("ix_produto_categoria_id_secao");

                    b.ToTable("tb_produto_categoria");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoControle", b =>
                {
                    b.Property<int>("IdProdutoControle")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto_controle")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsProdutoControle")
                        .IsRequired()
                        .HasColumnName("ds_produto_controle")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdProdutoControle");

                    b.ToTable("tb_produto_controle");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoControleStagging", b =>
                {
                    b.Property<int>("IdProdutoControleStagging")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto_controle_stagging")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdBarras")
                        .HasColumnName("cd_barras")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdProduto")
                        .HasColumnName("id_produto")
                        .HasColumnType("int");

                    b.Property<int>("IdProdutoControle")
                        .HasColumnName("id_produto_controle")
                        .HasColumnType("int");

                    b.HasKey("IdProdutoControleStagging");

                    b.ToTable("tb_produto_controle_stagging");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoDescricao", b =>
                {
                    b.Property<int>("IdProdutoDescricao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto_descricao")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<bool?>("FlTxProdutoTipo")
                        .HasColumnName("fl_tx_produto_tipo")
                        .HasColumnType("bit");

                    b.Property<int>("IdProduto")
                        .HasColumnName("id_produto")
                        .HasColumnType("int");

                    b.Property<int>("IdProdutoDescricaoTipo")
                        .HasColumnName("id_produto_descricao_tipo")
                        .HasColumnType("int");

                    b.Property<byte>("NuOrdem")
                        .HasColumnName("nu_ordem")
                        .HasColumnType("tinyint");

                    b.Property<string>("TxProdutoDescricao")
                        .IsRequired()
                        .HasColumnName("tx_produto_descricao")
                        .HasColumnType("text");

                    b.HasKey("IdProdutoDescricao");

                    b.HasIndex("IdProduto");

                    b.HasIndex("IdProdutoDescricaoTipo");

                    b.ToTable("tb_produto_descricao");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoDescricaoTipo", b =>
                {
                    b.Property<int>("IdProdutoDescricaoTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto_descricao_tipo")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdExterno")
                        .HasColumnName("cd_externo")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<string>("NmProdutoDescricaoTipo")
                        .IsRequired()
                        .HasColumnName("nm_produto_descricao_tipo")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdProdutoDescricaoTipo");

                    b.ToTable("tb_produto_descricao_tipo");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoEtiqueta", b =>
                {
                    b.Property<int>("IdProdutoEtiqueta")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto_etiqueta")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DtFinal")
                        .HasColumnName("dt_final")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("DtInicial")
                        .HasColumnName("dt_inicial")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("IdEtiqueta")
                        .HasColumnName("id_etiqueta")
                        .HasColumnType("int");

                    b.Property<int>("IdProduto")
                        .HasColumnName("id_produto")
                        .HasColumnType("int");

                    b.Property<int?>("IdPromocao")
                        .HasColumnName("id_promocao")
                        .HasColumnType("int");

                    b.HasKey("IdProdutoEtiqueta");

                    b.HasIndex("IdEtiqueta");

                    b.HasIndex("IdProduto");

                    b.HasIndex("IdPromocao");

                    b.ToTable("tb_produto_etiqueta");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoFamilia", b =>
                {
                    b.Property<int>("IdProdutoFamilia")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto_familia")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsImagem")
                        .HasColumnName("ds_imagem")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsProdutoFamilia")
                        .IsRequired()
                        .HasColumnName("ds_produto_familia")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdProdutoFamilia");

                    b.ToTable("tb_produto_familia");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoFamiliaModalidade", b =>
                {
                    b.Property<int>("IdProdutoFamiliaModalidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto_familia_modalidade")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsMensagem")
                        .HasColumnName("ds_mensagem")
                        .HasColumnType("varchar(300)")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<int>("IdModalidadeEntrega")
                        .HasColumnName("id_modalidade_entrega")
                        .HasColumnType("int");

                    b.Property<int>("IdProdutoFamilia")
                        .HasColumnName("id_produto_familia")
                        .HasColumnType("int");

                    b.HasKey("IdProdutoFamiliaModalidade");

                    b.HasIndex("IdModalidadeEntrega");

                    b.HasIndex("IdProdutoFamilia")
                        .HasName("IDX_PRODUTO_FAMILIA");

                    b.ToTable("tb_produto_familia_modalidade");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoFamiliaStagging", b =>
                {
                    b.Property<int>("IdProdutoFamiliaStagging")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto_familia_stagging")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdBarras")
                        .HasColumnName("cd_barras")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdProduto")
                        .HasColumnName("id_produto")
                        .HasColumnType("int");

                    b.Property<int>("IdProdutoFamilia")
                        .HasColumnName("id_produto_familia")
                        .HasColumnType("int");

                    b.HasKey("IdProdutoFamiliaStagging");

                    b.ToTable("tb_produto_familia_stagging");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoKit", b =>
                {
                    b.Property<int>("IdProdutoKit")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto_kit")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdProduto")
                        .HasColumnName("id_produto")
                        .HasColumnType("int");

                    b.Property<int>("IdProdutoSku")
                        .HasColumnName("id_produto_sku")
                        .HasColumnType("int");

                    b.Property<int>("NuQuantidade")
                        .HasColumnName("nu_quantidade")
                        .HasColumnType("int");

                    b.HasKey("IdProdutoKit");

                    b.HasIndex("IdProduto");

                    b.HasIndex("IdProdutoSku");

                    b.ToTable("tb_produto_kit");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoLancamento", b =>
                {
                    b.Property<int>("IdProdutoLancamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto_lancamento")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DtFinal")
                        .HasColumnName("dt_final")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("DtInicial")
                        .HasColumnName("dt_inicial")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("IdProduto")
                        .HasColumnName("id_produto")
                        .HasColumnType("int");

                    b.HasKey("IdProdutoLancamento");

                    b.HasIndex("IdProduto");

                    b.ToTable("tb_produto_lancamento");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoLog", b =>
                {
                    b.Property<int>("IdProdutoLog")
                        .HasColumnName("id_produto_log")
                        .HasColumnType("int");

                    b.Property<string>("DsAcao")
                        .IsRequired()
                        .HasColumnName("ds_acao")
                        .HasColumnType("char(3)")
                        .IsFixedLength(true)
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtAlteracao")
                        .HasColumnName("dt_alteracao")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("IdProduto")
                        .HasColumnName("id_produto")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnName("id_usuario")
                        .HasColumnType("int");

                    b.HasKey("IdProdutoLog");

                    b.HasIndex("IdProduto");

                    b.HasIndex("IdUsuario");

                    b.ToTable("tb_produto_log");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoPrincipioAtivo", b =>
                {
                    b.Property<int>("IdProdutoPrincipioAtivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto_principio_ativo")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("FlPrincipal")
                        .HasColumnName("fl_principal")
                        .HasColumnType("bit");

                    b.Property<int>("IdPrincipioAtivo")
                        .HasColumnName("id_principio_ativo")
                        .HasColumnType("int");

                    b.Property<int>("IdProduto")
                        .HasColumnName("id_produto")
                        .HasColumnType("int");

                    b.HasKey("IdProdutoPrincipioAtivo");

                    b.HasIndex("IdPrincipioAtivo");

                    b.HasIndex("IdProduto");

                    b.ToTable("tb_produto_principio_ativo");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoPrincipioAtivoBkp20191018", b =>
                {
                    b.Property<bool?>("FlPrincipal")
                        .HasColumnName("fl_principal")
                        .HasColumnType("bit");

                    b.Property<int>("IdPrincipioAtivo")
                        .HasColumnName("id_principio_ativo")
                        .HasColumnType("int");

                    b.Property<int>("IdProduto")
                        .HasColumnName("id_produto")
                        .HasColumnType("int");

                    b.Property<int>("IdProdutoPrincipioAtivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto_principio_ativo")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.ToTable("tb_produto_principio_ativo_bkp_20191018");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoSeo", b =>
                {
                    b.Property<int>("IdProdutoSeo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto_seo")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsDescription")
                        .HasColumnName("ds_description")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("DsKeywords")
                        .HasColumnName("ds_keywords")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("DsTitle")
                        .HasColumnName("ds_title")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("IdProduto")
                        .HasColumnName("id_produto")
                        .HasColumnType("int");

                    b.HasKey("IdProdutoSeo");

                    b.HasIndex("IdProduto");

                    b.HasIndex("DsDescription", "DsKeywords", "DsTitle", "IdProduto")
                        .HasName("idx_produto_seo");

                    b.ToTable("tb_produto_seo");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoSkuAviseMe", b =>
                {
                    b.Property<int>("IdProdutoSkuAviseMe")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto_sku_avise_me")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsEmail")
                        .IsRequired()
                        .HasColumnName("ds_email")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("DsNome")
                        .IsRequired()
                        .HasColumnName("ds_nome")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtCadastro")
                        .HasColumnName("dt_cadastro")
                        .HasColumnType("datetime");

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<int>("IdPraca")
                        .HasColumnName("id_praca")
                        .HasColumnType("int");

                    b.Property<int>("IdProdutoSku")
                        .HasColumnName("id_produto_sku")
                        .HasColumnType("int");

                    b.HasKey("IdProdutoSkuAviseMe");

                    b.HasIndex("IdProdutoSku");

                    b.ToTable("tb_produto_sku_avise_me");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoSkuEspecificacao", b =>
                {
                    b.Property<int>("IdProdutoSkuEspecificacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto_sku_especificacao")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdEspecificacao1")
                        .HasColumnName("id_especificacao_1")
                        .HasColumnType("int");

                    b.Property<int?>("IdEspecificacao2")
                        .HasColumnName("id_especificacao_2")
                        .HasColumnType("int");

                    b.Property<int>("IdProdutoSku")
                        .HasColumnName("id_produto_sku")
                        .HasColumnType("int");

                    b.HasKey("IdProdutoSkuEspecificacao");

                    b.HasIndex("IdEspecificacao1");

                    b.HasIndex("IdEspecificacao2");

                    b.HasIndex("IdProdutoSku");

                    b.ToTable("tb_produto_sku_especificacao");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoSkuFiltro", b =>
                {
                    b.Property<int>("IdProdutoSkuFiltro")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto_sku_filtro")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdFiltro")
                        .HasColumnName("id_filtro")
                        .HasColumnType("int");

                    b.Property<int>("IdProdutoSku")
                        .HasColumnName("id_produto_sku")
                        .HasColumnType("int");

                    b.HasKey("IdProdutoSkuFiltro");

                    b.HasIndex("IdFiltro");

                    b.HasIndex("IdProdutoSku");

                    b.ToTable("tb_produto_sku_filtro");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoSkuGenerico", b =>
                {
                    b.Property<int>("IdProdutoSkuGenerico")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto_sku_generico")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdGenerico")
                        .HasColumnName("id_generico")
                        .HasColumnType("int");

                    b.Property<int>("IdMedicamento")
                        .HasColumnName("id_medicamento")
                        .HasColumnType("int");

                    b.HasKey("IdProdutoSkuGenerico");

                    b.HasIndex("IdGenerico");

                    b.HasIndex("IdMedicamento");

                    b.ToTable("tb_produto_sku_generico");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoSkuImagem", b =>
                {
                    b.Property<int>("IdProdutoSkuImagem")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto_sku_imagem")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltImg")
                        .HasColumnName("alt_img")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DsImagem")
                        .IsRequired()
                        .HasColumnName("ds_imagem")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<bool>("FlPrincipal")
                        .HasColumnName("fl_principal")
                        .HasColumnType("bit");

                    b.Property<bool?>("FlSecundaria")
                        .HasColumnName("fl_secundaria")
                        .HasColumnType("bit");

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<int>("IdProdutoSku")
                        .HasColumnName("id_produto_sku")
                        .HasColumnType("int");

                    b.HasKey("IdProdutoSkuImagem");

                    b.HasIndex("IdProdutoSku");

                    b.HasIndex("DsImagem", "IdProdutoSku", "FlStatus", "FlPrincipal")
                        .HasName("idx_sku_imagem");

                    b.ToTable("tb_produto_sku_imagem");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoSkuOutrasOrigens", b =>
                {
                    b.Property<string>("CdBarras")
                        .HasColumnName("cd_barras")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("CdExterno")
                        .HasColumnName("cd_externo")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("CdMs")
                        .HasColumnName("cd_ms")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("DtCadastro")
                        .HasColumnName("dt_cadastro")
                        .HasColumnType("datetime");

                    b.Property<bool>("FlBrinde")
                        .HasColumnName("fl_brinde")
                        .HasColumnType("bit");

                    b.Property<bool>("FlExibirIndividualmente")
                        .HasColumnName("fl_exibir_individualmente")
                        .HasColumnType("bit");

                    b.Property<int>("IdProduto")
                        .HasColumnName("id_produto")
                        .HasColumnType("int");

                    b.Property<int>("IdProdutoSku")
                        .HasColumnName("id_produto_sku")
                        .HasColumnType("int");

                    b.Property<string>("NmProdutoSku")
                        .HasColumnName("nm_produto_sku")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int>("NuAltura")
                        .HasColumnName("nu_altura")
                        .HasColumnType("int");

                    b.Property<int>("NuLargura")
                        .HasColumnName("nu_largura")
                        .HasColumnType("int");

                    b.Property<decimal>("NuPeso")
                        .HasColumnName("nu_peso")
                        .HasColumnType("numeric(10, 3)");

                    b.Property<int>("NuProfundidade")
                        .HasColumnName("nu_profundidade")
                        .HasColumnType("int");

                    b.Property<string>("Origem")
                        .IsRequired()
                        .HasColumnName("origem")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<decimal?>("PcDescontoAtendente")
                        .HasColumnName("pc_desconto_atendente")
                        .HasColumnType("numeric(18, 2)");

                    b.ToTable("tb_produto_sku_outras_origens");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoSkuPraca", b =>
                {
                    b.Property<int>("IdProdutoSkuPraca")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto_sku_praca")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DtFimPromocao")
                        .HasColumnName("dt_fim_promocao")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DtInicioPromocao")
                        .HasColumnName("dt_inicio_promocao")
                        .HasColumnType("smalldatetime");

                    b.Property<bool?>("FlPromocao")
                        .HasColumnName("fl_promocao")
                        .HasColumnType("bit");

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<int>("IdPraca")
                        .HasColumnName("id_praca")
                        .HasColumnType("int");

                    b.Property<int>("IdProdutoSku")
                        .HasColumnName("id_produto_sku")
                        .HasColumnType("int");

                    b.Property<int>("NuEstoque")
                        .HasColumnName("nu_estoque")
                        .HasColumnType("int");

                    b.Property<int>("NuEstoqueMinimo")
                        .HasColumnName("nu_estoque_minimo")
                        .HasColumnType("int");

                    b.Property<int>("NuPrazoPostagem")
                        .HasColumnName("nu_prazo_postagem")
                        .HasColumnType("int");

                    b.Property<decimal?>("PcDesconto")
                        .HasColumnName("pc_desconto")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("VlEmbalagemPresente")
                        .HasColumnName("vl_embalagem_presente")
                        .HasColumnType("money");

                    b.Property<decimal>("VlProdutoSkuDe")
                        .HasColumnName("vl_produto_sku_de")
                        .HasColumnType("money");

                    b.Property<decimal>("VlProdutoSkuPor")
                        .HasColumnName("vl_produto_sku_por")
                        .HasColumnType("money");

                    b.Property<decimal?>("VlProdutoSkuPromocaoDe")
                        .HasColumnName("vl_produto_sku_promocao_de")
                        .HasColumnType("money");

                    b.Property<decimal?>("VlProdutoSkuPromocaoPor")
                        .HasColumnName("vl_produto_sku_promocao_por")
                        .HasColumnType("money");

                    b.HasKey("IdProdutoSkuPraca");

                    b.HasIndex("IdPraca");

                    b.HasIndex("IdProdutoSku");

                    b.HasIndex("VlProdutoSkuPor", "NuEstoque", "IdProdutoSku", "IdPraca", "FlStatus")
                        .HasName("IX_produto_sku_praca");

                    b.HasIndex("DtFimPromocao", "DtInicioPromocao", "FlPromocao", "NuEstoqueMinimo", "VlProdutoSkuDe", "VlProdutoSkuPromocaoDe", "VlProdutoSkuPromocaoPor", "VlProdutoSkuPor", "NuEstoque", "IdProdutoSku", "IdPraca", "FlStatus")
                        .HasName("idx_sku_praca");

                    b.ToTable("tb_produto_sku_praca");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoSkuRelacionado", b =>
                {
                    b.Property<int>("IdProdutoSkuRelacionado")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto_sku_relacionado")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdProdutoSku")
                        .HasColumnName("id_produto_sku")
                        .HasColumnType("int");

                    b.Property<int>("IdProdutoSkuRelacao")
                        .HasColumnName("id_produto_sku_relacao")
                        .HasColumnType("int");

                    b.HasKey("IdProdutoSkuRelacionado");

                    b.HasIndex("IdProdutoSkuRelacao");

                    b.HasIndex("IdProdutoSku", "IdProdutoSkuRelacao")
                        .HasName("idx_relacionado");

                    b.ToTable("tb_produto_sku_relacionado");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoSkuSemImagens", b =>
                {
                    b.Property<string>("CdBarras")
                        .HasColumnName("cd_barras")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("DsImagem")
                        .IsRequired()
                        .HasColumnName("ds_imagem")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<bool>("FlIntegrado")
                        .HasColumnName("fl_integrado")
                        .HasColumnType("bit");

                    b.Property<bool>("FlPrincipal")
                        .HasColumnName("fl_principal")
                        .HasColumnType("bit");

                    b.Property<bool?>("FlSecundaria")
                        .HasColumnName("fl_secundaria")
                        .HasColumnType("bit");

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<string>("Origem")
                        .IsRequired()
                        .HasColumnName("origem")
                        .HasColumnType("varchar(9)")
                        .HasMaxLength(9)
                        .IsUnicode(false);

                    b.Property<int>("SkuVfarma")
                        .HasColumnName("sku_vfarma")
                        .HasColumnType("int");

                    b.HasIndex("SkuVfarma")
                        .IsUnique()
                        .HasName("IX_tb_produto_sku_sem_imagens");

                    b.ToTable("tb_produto_sku_sem_imagens");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoSkuVendaCasada", b =>
                {
                    b.Property<int>("IdProdutoSkuVendaCasada")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto_sku_venda_casada")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DtFim")
                        .HasColumnName("dt_fim")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("DtInicio")
                        .HasColumnName("dt_inicio")
                        .HasColumnType("smalldatetime");

                    b.Property<bool?>("FlTipoDesconto")
                        .HasColumnName("fl_tipo_desconto")
                        .HasColumnType("bit");

                    b.Property<int>("IdProdutoSku")
                        .HasColumnName("id_produto_sku")
                        .HasColumnType("int");

                    b.Property<int>("IdProdutoSkuCasado")
                        .HasColumnName("id_produto_sku_casado")
                        .HasColumnType("int");

                    b.Property<decimal?>("VlDesconto")
                        .HasColumnName("vl_desconto")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("IdProdutoSkuVendaCasada");

                    b.HasIndex("IdProdutoSku");

                    b.HasIndex("IdProdutoSkuCasado");

                    b.ToTable("tb_produto_sku_venda_casada");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoTipo", b =>
                {
                    b.Property<int>("IdProdutoTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto_tipo")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsProdutoTipo")
                        .IsRequired()
                        .HasColumnName("ds_produto_tipo")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdProdutoTipo");

                    b.ToTable("tb_produto_tipo");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoTipoStagging", b =>
                {
                    b.Property<int>("IdProdutoFamiliaStagging")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto_familia_stagging")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdBarras")
                        .HasColumnName("cd_barras")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdProduto")
                        .HasColumnName("id_produto")
                        .HasColumnType("int");

                    b.Property<int>("IdProdutoTipo")
                        .HasColumnName("id_produto_tipo")
                        .HasColumnType("int");

                    b.HasKey("IdProdutoFamiliaStagging");

                    b.ToTable("tb_produto_tipo_stagging");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoVideo", b =>
                {
                    b.Property<int>("IdProdutoVideo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_produto_video")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsUrl")
                        .IsRequired()
                        .HasColumnName("ds_url")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<int>("IdProduto")
                        .HasColumnName("id_produto")
                        .HasColumnType("int");

                    b.Property<string>("NmVideo")
                        .HasColumnName("nm_video")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TxVideo")
                        .HasColumnName("tx_video")
                        .HasColumnType("text");

                    b.HasKey("IdProdutoVideo");

                    b.HasIndex("IdProduto");

                    b.ToTable("tb_produto_video");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutosAtualizados", b =>
                {
                    b.Property<string>("CdBarras")
                        .HasColumnName("cd_barras")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Fonte")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int>("IdProduto")
                        .HasColumnName("id_produto")
                        .HasColumnType("int");

                    b.ToTable("tb_produtos_atualizados");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPrograma", b =>
                {
                    b.Property<int>("IdPrograma")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_programa")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdPrograma")
                        .IsRequired()
                        .HasColumnName("cd_programa")
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("DsImagem")
                        .IsRequired()
                        .HasColumnName("ds_imagem")
                        .HasColumnType("varchar(155)")
                        .HasMaxLength(155)
                        .IsUnicode(false);

                    b.Property<string>("NmPrograma")
                        .IsRequired()
                        .HasColumnName("nm_programa")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("IdPrograma");

                    b.HasIndex("IdPrograma", "NmPrograma", "DsImagem", "CdPrograma")
                        .HasName("idx_programa");

                    b.ToTable("tb_programa");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProgramaProduto", b =>
                {
                    b.Property<int>("IdProgramaProduto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_programa_produto")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsPromocao")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ds_promocao")
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("('O')")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtAtualizacao")
                        .HasColumnName("dt_atualizacao")
                        .HasColumnType("datetime");

                    b.Property<int>("IdProdutoSku")
                        .HasColumnName("id_produto_sku")
                        .HasColumnType("int");

                    b.Property<int>("IdPrograma")
                        .HasColumnName("id_programa")
                        .HasColumnType("int");

                    b.HasKey("IdProgramaProduto");

                    b.HasIndex("IdProdutoSku");

                    b.HasIndex("IdPrograma", "IdProdutoSku")
                        .HasName("idx_produto_programa");

                    b.ToTable("tb_programa_produto");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocao", b =>
                {
                    b.Property<int>("IdPromocao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_promocao")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DtFinal")
                        .HasColumnName("dt_final")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("DtInicial")
                        .HasColumnName("dt_inicial")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("FlGeraCupomAutomatico")
                        .HasColumnName("fl_gera_cupom_automatico")
                        .HasColumnType("bit");

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit")
                        .HasComment("0 - Inativo /1 - Ativo");

                    b.Property<int?>("IdEtiqueta")
                        .HasColumnName("id_etiqueta")
                        .HasColumnType("int");

                    b.Property<int?>("IdProdutoBrinde")
                        .HasColumnName("id_produto_brinde")
                        .HasColumnType("int");

                    b.Property<int>("IdPromocaoAcao")
                        .HasColumnName("id_promocao_acao")
                        .HasColumnType("int");

                    b.Property<int>("IdPromocaoBeneficio")
                        .HasColumnName("id_promocao_beneficio")
                        .HasColumnType("int");

                    b.Property<int>("IdPromocaoTipo")
                        .HasColumnName("id_promocao_tipo")
                        .HasColumnType("int");

                    b.Property<string>("NmPromocao")
                        .IsRequired()
                        .HasColumnName("nm_promocao")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("NuPesoMaximo")
                        .HasColumnName("nu_peso_maximo")
                        .HasColumnType("decimal(10, 3)");

                    b.Property<decimal?>("VlDesconto")
                        .HasColumnName("vl_desconto")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("VlMinimoPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("vl_minimo_pedido")
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("IdPromocao");

                    b.HasIndex("IdEtiqueta");

                    b.HasIndex("IdPromocaoAcao");

                    b.HasIndex("IdPromocaoBeneficio");

                    b.HasIndex("IdPromocaoTipo");

                    b.ToTable("tb_promocao");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocaoAcao", b =>
                {
                    b.Property<int>("IdPromocaoAcao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_promocao_acao")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NmPromocaoAcao")
                        .IsRequired()
                        .HasColumnName("nm_promocao_acao")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdPromocaoAcao");

                    b.ToTable("tb_promocao_acao");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocaoBeneficio", b =>
                {
                    b.Property<int>("IdPromocaoBeneficio")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_promocao_beneficio")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NmPromocaoBeneficio")
                        .IsRequired()
                        .HasColumnName("nm_promocao_beneficio")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdPromocaoBeneficio");

                    b.ToTable("tb_promocao_beneficio");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocaoCategoria", b =>
                {
                    b.Property<int>("IdPromocaoCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_promocao_categoria")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("IdCategoria")
                        .HasColumnName("id_categoria")
                        .HasColumnType("int");

                    b.Property<int>("IdDepartamento")
                        .HasColumnName("id_departamento")
                        .HasColumnType("int");

                    b.Property<int>("IdPromocao")
                        .HasColumnName("id_promocao")
                        .HasColumnType("int");

                    b.Property<int?>("IdSecao")
                        .HasColumnName("id_secao")
                        .HasColumnType("int");

                    b.Property<int?>("IdSubcategoria")
                        .HasColumnName("id_subcategoria")
                        .HasColumnType("int");

                    b.HasKey("IdPromocaoCategoria");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdDepartamento");

                    b.HasIndex("IdPromocao");

                    b.HasIndex("IdSecao");

                    b.HasIndex("IdSubcategoria");

                    b.ToTable("tb_promocao_categoria");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocaoCep", b =>
                {
                    b.Property<int>("IdPromocaoCep")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_promocao_cep")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsBairro")
                        .HasColumnName("ds_bairro")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsCepFinal")
                        .IsRequired()
                        .HasColumnName("ds_cep_final")
                        .HasColumnType("char(8)")
                        .IsFixedLength(true)
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("DsCepInicial")
                        .IsRequired()
                        .HasColumnName("ds_cep_inicial")
                        .HasColumnType("char(8)")
                        .IsFixedLength(true)
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("DsCidade")
                        .HasColumnName("ds_cidade")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsEstado")
                        .HasColumnName("ds_estado")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<int>("IdPromocao")
                        .HasColumnName("id_promocao")
                        .HasColumnType("int");

                    b.HasKey("IdPromocaoCep");

                    b.HasIndex("IdPromocao");

                    b.ToTable("tb_promocao_cep");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocaoCliente", b =>
                {
                    b.Property<int>("IdPromocaoCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_promocao_cliente")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdCliente")
                        .HasColumnName("id_cliente")
                        .HasColumnType("int");

                    b.Property<int>("IdPromocao")
                        .HasColumnName("id_promocao")
                        .HasColumnType("int");

                    b.HasKey("IdPromocaoCliente");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdPromocao");

                    b.ToTable("tb_promocao_cliente");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocaoCupom", b =>
                {
                    b.Property<int>("IdPromocaoCupom")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_promocao_cupom")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DtCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_cadastro")
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DtValidade")
                        .HasColumnName("dt_validade")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("FlUnicoCliente")
                        .HasColumnName("fl_unico_cliente")
                        .HasColumnType("bit");

                    b.Property<int>("IdPromocao")
                        .HasColumnName("id_promocao")
                        .HasColumnType("int");

                    b.Property<string>("NuCupom")
                        .IsRequired()
                        .HasColumnName("nu_cupom")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int>("NuQtdUtiliza")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nu_qtd_utiliza")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("IdPromocaoCupom");

                    b.HasIndex("IdPromocao");

                    b.ToTable("tb_promocao_cupom");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocaoCupomUtilizado", b =>
                {
                    b.Property<int>("IdPromocaoCupomUtilizado")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_promocao_cupom_utilizado")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DtUtilizado")
                        .HasColumnName("dt_utilizado")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("IdCliente")
                        .HasColumnName("id_cliente")
                        .HasColumnType("int");

                    b.Property<int>("IdPedido")
                        .HasColumnName("id_pedido")
                        .HasColumnType("int");

                    b.Property<int>("IdPromocaoCupom")
                        .HasColumnName("id_promocao_cupom")
                        .HasColumnType("int");

                    b.HasKey("IdPromocaoCupomUtilizado");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdPedido");

                    b.HasIndex("IdPromocaoCupom");

                    b.ToTable("tb_promocao_cupom_utilizado");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocaoMarca", b =>
                {
                    b.Property<int>("IdPromocaoMarca")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_promocao_marca")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdMarca")
                        .HasColumnName("id_marca")
                        .HasColumnType("int");

                    b.Property<int>("IdPromocao")
                        .HasColumnName("id_promocao")
                        .HasColumnType("int");

                    b.HasKey("IdPromocaoMarca");

                    b.HasIndex("IdMarca");

                    b.HasIndex("IdPromocao");

                    b.ToTable("tb_promocao_marca");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocaoModalidade", b =>
                {
                    b.Property<int>("IdPromocaoModalidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_promocao_modalidade")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdModalidadeEntrega")
                        .HasColumnName("id_modalidade_entrega")
                        .HasColumnType("int");

                    b.Property<int>("IdPromocao")
                        .HasColumnName("id_promocao")
                        .HasColumnType("int");

                    b.HasKey("IdPromocaoModalidade");

                    b.HasIndex("IdModalidadeEntrega");

                    b.HasIndex("IdPromocao");

                    b.ToTable("tb_promocao_modalidade");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocaoPagamento", b =>
                {
                    b.Property<int>("IdPromocaoPagamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_promocao_pagamento")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("IdFormaPagamento")
                        .HasColumnName("id_forma_pagamento")
                        .HasColumnType("int");

                    b.Property<int>("IdPromocao")
                        .HasColumnName("id_promocao")
                        .HasColumnType("int");

                    b.HasKey("IdPromocaoPagamento");

                    b.HasIndex("IdFormaPagamento");

                    b.HasIndex("IdPromocao");

                    b.ToTable("tb_promocao_pagamento");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocaoPraca", b =>
                {
                    b.Property<int>("IdPromocaoPraca")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_promocao_praca")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdPraca")
                        .HasColumnName("id_praca")
                        .HasColumnType("int");

                    b.Property<int>("IdPromocao")
                        .HasColumnName("id_promocao")
                        .HasColumnType("int");

                    b.HasKey("IdPromocaoPraca");

                    b.HasIndex("IdPraca");

                    b.HasIndex("IdPromocao");

                    b.ToTable("tb_promocao_praca");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocaoProduto", b =>
                {
                    b.Property<int>("IdPromocaoProduto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_promocao_produto")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdProduto")
                        .HasColumnName("id_produto")
                        .HasColumnType("int");

                    b.Property<int>("IdPromocao")
                        .HasColumnName("id_promocao")
                        .HasColumnType("int");

                    b.HasKey("IdPromocaoProduto");

                    b.HasIndex("IdProduto");

                    b.HasIndex("IdPromocao");

                    b.ToTable("tb_promocao_produto");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocaoTipo", b =>
                {
                    b.Property<int>("IdPromocaoTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_promocao_tipo")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NmPromocaoTipo")
                        .IsRequired()
                        .HasColumnName("nm_promocao_tipo")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdPromocaoTipo");

                    b.ToTable("tb_promocao_tipo");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocaoTipoAcao", b =>
                {
                    b.Property<int>("IdPromocaoTipoAcao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_promocao_tipo_acao")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdPromocaoAcao")
                        .HasColumnName("id_promocao_acao")
                        .HasColumnType("int");

                    b.Property<int>("IdPromocaoTipo")
                        .HasColumnName("id_promocao_tipo")
                        .HasColumnType("int");

                    b.HasKey("IdPromocaoTipoAcao");

                    b.HasIndex("IdPromocaoAcao");

                    b.HasIndex("IdPromocaoTipo");

                    b.ToTable("tb_promocao_tipo_acao");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocaoTipoBeneficio", b =>
                {
                    b.Property<int>("IdPromocaoTipoBeneficio")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_promocao_tipo_beneficio")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdPromocaoBeneficio")
                        .HasColumnName("id_promocao_beneficio")
                        .HasColumnType("int");

                    b.Property<int>("IdPromocaoTipo")
                        .HasColumnName("id_promocao_tipo")
                        .HasColumnType("int");

                    b.HasKey("IdPromocaoTipoBeneficio");

                    b.HasIndex("IdPromocaoBeneficio");

                    b.HasIndex("IdPromocaoTipo");

                    b.ToTable("tb_promocao_tipo_beneficio");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbQuemComprouComprouTambem", b =>
                {
                    b.Property<int>("IdQuemComprouComprouTambem")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_quem_comprou_comprou_tambem")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdProdutoSku")
                        .HasColumnName("id_produto_sku")
                        .HasColumnType("int");

                    b.Property<int>("IdProdutoSkuComprado")
                        .HasColumnName("id_produto_sku_comprado")
                        .HasColumnType("int");

                    b.Property<int>("NuQuantidade")
                        .HasColumnName("nu_quantidade")
                        .HasColumnType("int");

                    b.HasKey("IdQuemComprouComprouTambem");

                    b.HasIndex("IdProdutoSku", "NuQuantidade")
                        .HasName("idx_comprou_tambem");

                    b.ToTable("tb_quem_comprou_comprou_tambem");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbQuemViuComprou", b =>
                {
                    b.Property<int>("IdQuemViuComprou")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_quem_viu_comprou")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdProdutoSkuComprado")
                        .HasColumnName("id_produto_sku_comprado")
                        .HasColumnType("int");

                    b.Property<int>("IdProdutoSkuVisto")
                        .HasColumnName("id_produto_sku_visto")
                        .HasColumnType("int");

                    b.Property<int>("NuQuantidade")
                        .HasColumnName("nu_quantidade")
                        .HasColumnType("int");

                    b.HasKey("IdQuemViuComprou");

                    b.HasIndex("IdProdutoSkuComprado");

                    b.HasIndex("IdProdutoSkuVisto", "NuQuantidade")
                        .HasName("idx_quem_viu");

                    b.ToTable("tb_quem_viu_comprou");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbQuemViuViuTambem", b =>
                {
                    b.Property<int>("IdQuemViuViuTambem")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_quem_viu_viu_tambem")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdProdutoSku")
                        .HasColumnName("id_produto_sku")
                        .HasColumnType("int");

                    b.Property<int>("IdProdutoSkuVisto")
                        .HasColumnName("id_produto_sku_visto")
                        .HasColumnType("int");

                    b.Property<int>("NuQuantidade")
                        .HasColumnName("nu_quantidade")
                        .HasColumnType("int");

                    b.HasKey("IdQuemViuViuTambem");

                    b.HasIndex("IdProdutoSku");

                    b.HasIndex("IdProdutoSkuVisto");

                    b.ToTable("tb_quem_viu_viu_tambem");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbRedeSocial", b =>
                {
                    b.Property<string>("DsLink")
                        .IsRequired()
                        .HasColumnName("ds_link")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsLogo")
                        .IsRequired()
                        .HasColumnName("ds_logo")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("IdRedeSocial")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_rede_social")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NmRedeSocial")
                        .IsRequired()
                        .HasColumnName("nm_rede_social")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TxPlugin")
                        .HasColumnName("tx_plugin")
                        .HasColumnType("text");

                    b.ToTable("tb_rede_social");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbRodape", b =>
                {
                    b.Property<int>("IdRodape")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_rodape")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdPraca")
                        .HasColumnName("id_praca")
                        .HasColumnType("int");

                    b.Property<string>("NmRodape")
                        .IsRequired()
                        .HasColumnName("nm_rodape")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TxConteudo")
                        .IsRequired()
                        .HasColumnName("tx_conteudo")
                        .HasColumnType("text");

                    b.HasKey("IdRodape");

                    b.HasIndex("IdPraca");

                    b.ToTable("tb_rodape");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbSecApps", b =>
                {
                    b.Property<string>("AppName")
                        .HasColumnName("app_name")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("AppType")
                        .HasColumnName("app_type")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("AppName")
                        .HasName("PK__tb_sec_a__A5AEA8370B0A0C34");

                    b.ToTable("tb_sec_apps");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbSecGroups", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("GroupId")
                        .HasName("PK__tb_sec_g__D57795A00EDA9D18");

                    b.HasIndex("Description")
                        .IsUnique()
                        .HasName("UQ__tb_sec_g__489B0D9711B709C3")
                        .HasFilter("[description] IS NOT NULL");

                    b.ToTable("tb_sec_groups");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbSecGroupsApps", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("int");

                    b.Property<string>("AppName")
                        .HasColumnName("app_name")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("PrivAccess")
                        .HasColumnName("priv_access")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("PrivDelete")
                        .HasColumnName("priv_delete")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("PrivExport")
                        .HasColumnName("priv_export")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("PrivInsert")
                        .HasColumnName("priv_insert")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("PrivPrint")
                        .HasColumnName("priv_print")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("PrivUpdate")
                        .HasColumnName("priv_update")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("GroupId", "AppName")
                        .HasName("PK__tb_sec_g__BF2D7F2319582B8B");

                    b.HasIndex("AppName");

                    b.ToTable("tb_sec_groups_apps");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbSecLogged", b =>
                {
                    b.Property<string>("Login")
                        .HasColumnName("login")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<int?>("DateLogin")
                        .HasColumnName("date_login")
                        .HasColumnType("int");

                    b.Property<string>("ScSession")
                        .HasColumnName("sc_session")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Login");

                    b.ToTable("tb_sec_logged");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbSecUsers", b =>
                {
                    b.Property<string>("Login")
                        .HasColumnName("login")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("ActivationCode")
                        .HasColumnName("activation_code")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Active")
                        .HasColumnName("active")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("PrivAdmin")
                        .HasColumnName("priv_admin")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("Pswd")
                        .IsRequired()
                        .HasColumnName("pswd")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("Login")
                        .HasName("PK_tb_sec_users_1");

                    b.ToTable("tb_sec_users");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbSecUsersGroups", b =>
                {
                    b.Property<string>("Login")
                        .HasColumnName("login")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("int");

                    b.HasKey("Login", "GroupId")
                        .HasName("PK__tb_sec_u__656F8B2915879AA7");

                    b.HasIndex("GroupId");

                    b.ToTable("tb_sec_users_groups");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbServicoCorreios", b =>
                {
                    b.Property<int>("IdServicoCorreios")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_servico_correios")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdServicoCorreios")
                        .IsRequired()
                        .HasColumnName("cd_servico_correios")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NmServicoCorreios")
                        .IsRequired()
                        .HasColumnName("nm_servico_correios")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdServicoCorreios");

                    b.ToTable("tb_servico_correios");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbServicoTotalexpress", b =>
                {
                    b.Property<int>("IdServicoTotalexpress")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_servico_totalexpress")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdServicoTotalexpress")
                        .IsRequired()
                        .HasColumnName("cd_servico_totalexpress")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("NmServicoTotalexpress")
                        .IsRequired()
                        .HasColumnName("nm_servico_totalexpress")
                        .HasColumnType("varchar(450)")
                        .HasMaxLength(450)
                        .IsUnicode(false);

                    b.HasKey("IdServicoTotalexpress")
                        .HasName("PK__tb_servi__5DE56E4322E659CF");

                    b.HasIndex("IdServicoTotalexpress")
                        .IsUnique()
                        .HasName("tb_servico_totalexpress_id_servico_totalexpress_uindex");

                    b.ToTable("tb_servico_totalexpress");

                    b.HasComment("Serviços da Total Express");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbSevenpdvLogon", b =>
                {
                    b.Property<int>("IdSevenpdvLogon")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_sevenpdv_logon")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdSistema")
                        .IsRequired()
                        .HasColumnName("cd_sistema")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("DsChaveMestre")
                        .IsRequired()
                        .HasColumnName("ds_chave_mestre")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<short>("DsVersaoInterface")
                        .HasColumnName("ds_versao_interface")
                        .HasColumnType("smallint");

                    b.Property<int>("DsVersaoTabela")
                        .HasColumnName("ds_versao_tabela")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DtInclusao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_inclusao")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("FlAtivo")
                        .HasColumnName("fl_ativo")
                        .HasColumnType("bit");

                    b.Property<int?>("IdAutorizador")
                        .HasColumnName("id_autorizador")
                        .HasColumnType("int");

                    b.Property<long?>("IdOrigem")
                        .HasColumnName("id_origem")
                        .HasColumnType("bigint");

                    b.HasKey("IdSevenpdvLogon");

                    b.ToTable("tb_sevenpdv_logon");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbSevenpdvSessao", b =>
                {
                    b.Property<int>("IdSevenpdvSessao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_sevenpdv_sessao")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CdRetorno")
                        .HasColumnName("cd_retorno")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<int?>("CdStatusServico")
                        .HasColumnName("cd_status_servico")
                        .HasColumnType("int");

                    b.Property<string>("DsChave")
                        .HasColumnName("ds_chave")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DsControleAcesso")
                        .HasColumnName("ds_controle_acesso")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("DsDesvioFluxo")
                        .HasColumnName("ds_desvio_fluxo")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DtCentral")
                        .HasColumnName("dt_central")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DtExecucao")
                        .HasColumnName("dt_execucao")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdSevenpdvLogon")
                        .HasColumnName("id_sevenpdv_logon")
                        .HasColumnType("int");

                    b.Property<long?>("NuCentral")
                        .HasColumnName("nu_central")
                        .HasColumnType("bigint");

                    b.Property<int?>("NuHorasExpiracao")
                        .HasColumnName("nu_horas_expiracao")
                        .HasColumnType("int");

                    b.Property<string>("TxInformativo")
                        .HasColumnName("tx_informativo")
                        .HasColumnType("text");

                    b.HasKey("IdSevenpdvSessao")
                        .HasName("PK__tb_seven__97CFC634153CB68D");

                    b.HasIndex("IdSevenpdvLogon");

                    b.ToTable("tb_sevenpdv_sessao");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbSkuPracaMovimentacao", b =>
                {
                    b.Property<int>("IdProdutoSkuPraca")
                        .HasColumnName("id_produto_sku_praca")
                        .HasColumnType("int");

                    b.Property<DateTime>("DtMovimentacao")
                        .HasColumnName("dt_movimentacao")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("NuEstoqueAtual")
                        .HasColumnName("nu_estoque_atual")
                        .HasColumnType("int");

                    b.Property<int>("NuEstoqueDisponivel")
                        .HasColumnName("nu_estoque_disponivel")
                        .HasColumnType("int");

                    b.Property<int>("NuEstoqueEntrada")
                        .HasColumnName("nu_estoque_entrada")
                        .HasColumnType("int");

                    b.Property<int>("NuEstoqueReservado")
                        .HasColumnName("nu_estoque_reservado")
                        .HasColumnType("int");

                    b.Property<decimal>("VlPrecoAtual")
                        .HasColumnName("vl_preco_atual")
                        .HasColumnType("money");

                    b.Property<decimal>("VlPrecoNovo")
                        .HasColumnName("vl_preco_novo")
                        .HasColumnType("money");

                    b.HasKey("IdProdutoSkuPraca")
                        .HasName("PK_tb_sku_praca_movimentacao_1");

                    b.ToTable("tb_sku_praca_movimentacao");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbSli", b =>
                {
                    b.Property<int>("IdSli")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_sli")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsFtpHost")
                        .HasColumnName("ds_ftp_host")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DsSenha")
                        .HasColumnName("ds_senha")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DsUsuario")
                        .HasColumnName("ds_usuario")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdSli");

                    b.ToTable("tb_sli");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbSuperDesconto", b =>
                {
                    b.Property<int>("IdSuperDesconto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_super_desconto")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DtValidadeFinal")
                        .HasColumnName("dt_validade_final")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("DtValidadeInicial")
                        .HasColumnName("dt_validade_inicial")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("IdProdutoSku")
                        .HasColumnName("id_produto_sku")
                        .HasColumnType("int");

                    b.Property<int>("NuOrdem")
                        .HasColumnName("nu_ordem")
                        .HasColumnType("int");

                    b.HasKey("IdSuperDesconto");

                    b.HasIndex("IdProdutoSku");

                    b.HasIndex("DtValidadeInicial", "DtValidadeFinal")
                        .HasName("idx_super_desconto");

                    b.ToTable("tb_super_desconto");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbUploadImagem", b =>
                {
                    b.Property<int>("IdUploadImagem")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_upload_imagem")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsArquivo")
                        .IsRequired()
                        .HasColumnName("ds_arquivo")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DsUrl")
                        .IsRequired()
                        .HasColumnName("ds_url")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("IdUploadImagem");

                    b.ToTable("tb_upload_imagem");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbUsuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_usuario")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsEmail")
                        .IsRequired()
                        .HasColumnName("ds_email")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DsLogin")
                        .IsRequired()
                        .HasColumnName("ds_login")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("DsSenha")
                        .IsRequired()
                        .HasColumnName("ds_senha")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_cadastro")
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("FlSenhaAutomatica")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fl_senha_automatica")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<string>("FlTipo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fl_tipo")
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("('S')")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<int>("IdUsuarioGrupo")
                        .HasColumnName("id_usuario_grupo")
                        .HasColumnType("int");

                    b.Property<string>("NmUsuario")
                        .IsRequired()
                        .HasColumnName("nm_usuario")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("PcComissaoTelevendas")
                        .HasColumnName("pc_comissao_televendas")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("IdUsuario");

                    b.HasIndex("IdUsuarioGrupo");

                    b.ToTable("tb_usuario");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbUsuarioGrupo", b =>
                {
                    b.Property<int>("IdUsuarioGrupo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_usuario_grupo")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DtCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_cadastro")
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<string>("NmUsuarioGrupo")
                        .IsRequired()
                        .HasColumnName("nm_usuario_grupo")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdUsuarioGrupo");

                    b.ToTable("tb_usuario_grupo");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbUsuarioGrupoAcesso", b =>
                {
                    b.Property<int>("IdUsuarioGrupoAcesso")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_usuario_grupo_acesso")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("FlAltera")
                        .HasColumnName("fl_altera")
                        .HasColumnType("bit");

                    b.Property<bool>("FlConsulta")
                        .HasColumnName("fl_consulta")
                        .HasColumnType("bit");

                    b.Property<bool>("FlExclui")
                        .HasColumnName("fl_exclui")
                        .HasColumnType("bit");

                    b.Property<bool>("FlInclui")
                        .HasColumnName("fl_inclui")
                        .HasColumnType("bit");

                    b.Property<int>("IdAcesso")
                        .HasColumnName("id_acesso")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuarioGrupo")
                        .HasColumnName("id_usuario_grupo")
                        .HasColumnType("int");

                    b.HasKey("IdUsuarioGrupoAcesso");

                    b.HasIndex("IdAcesso");

                    b.HasIndex("IdUsuarioGrupo");

                    b.ToTable("tb_usuario_grupo_acesso");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbUsuarioGrupoTelevendas", b =>
                {
                    b.Property<int>("IdUsuarioGrupoTelevendas")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_usuario_grupo_televendas")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NmUsuarioGrupoTelevendas")
                        .IsRequired()
                        .HasColumnName("nm_usuario_grupo_televendas")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdUsuarioGrupoTelevendas");

                    b.ToTable("tb_usuario_grupo_televendas");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbUsuarioIp", b =>
                {
                    b.Property<int>("IdUsuarioIp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_usuario_ip")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsIp")
                        .IsRequired()
                        .HasColumnName("ds_ip")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("IdUsuario")
                        .HasColumnName("id_usuario")
                        .HasColumnType("int");

                    b.HasKey("IdUsuarioIp");

                    b.HasIndex("IdUsuario");

                    b.ToTable("tb_usuario_ip");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbUsuarioPraca", b =>
                {
                    b.Property<int>("IdUsuarioPraca")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_usuario_praca")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdPraca")
                        .HasColumnName("id_praca")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnName("id_usuario")
                        .HasColumnType("int");

                    b.HasKey("IdUsuarioPraca");

                    b.HasIndex("IdPraca");

                    b.HasIndex("IdUsuario");

                    b.ToTable("tb_usuario_praca");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbUsuarioRecuperacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnName("codigo")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Cookie")
                        .HasColumnName("cookie")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("Data")
                        .HasColumnName("data")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("tb_usuario_recuperacao");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbUsuarioTelevendas", b =>
                {
                    b.Property<int>("IdUsuarioTelevendas")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_usuario_televendas")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DsLogin")
                        .IsRequired()
                        .HasColumnName("ds_login")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DsNome")
                        .HasColumnName("ds_nome")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("DsSenha")
                        .IsRequired()
                        .HasColumnName("ds_senha")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("DtCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_cadastro")
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("FlPrimeiroAcesso")
                        .HasColumnName("fl_primeiro_acesso")
                        .HasColumnType("bit");

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit");

                    b.Property<int>("IdUsuarioGrupoTelevendas")
                        .HasColumnName("id_usuario_grupo_televendas")
                        .HasColumnType("int");

                    b.Property<decimal>("PcComissao")
                        .HasColumnName("pc_comissao")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("IdUsuarioTelevendas")
                        .HasName("PK_tb_usuario_televedas");

                    b.HasIndex("IdUsuarioGrupoTelevendas");

                    b.ToTable("tb_usuario_televendas");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbVitrine", b =>
                {
                    b.Property<int>("IdVitrine")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_vitrine")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DtCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_cadastro")
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DtFinal")
                        .HasColumnName("dt_final")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("DtInicio")
                        .HasColumnName("dt_inicio")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("FlStatus")
                        .HasColumnName("fl_status")
                        .HasColumnType("bit")
                        .HasComment("0 - Inativo / 1 - Ativo");

                    b.Property<int>("IdVitrineTipo")
                        .HasColumnName("id_vitrine_tipo")
                        .HasColumnType("int");

                    b.Property<string>("NmVitrine")
                        .IsRequired()
                        .HasColumnName("nm_vitrine")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte>("NuOrdem")
                        .HasColumnName("nu_ordem")
                        .HasColumnType("tinyint");

                    b.HasKey("IdVitrine");

                    b.HasIndex("IdVitrineTipo");

                    b.HasIndex("NmVitrine", "FlStatus", "DtInicio", "DtFinal", "NuOrdem")
                        .HasName("idx_vitrine");

                    b.ToTable("tb_vitrine");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbVitrineCategoria", b =>
                {
                    b.Property<int>("IdVitrineCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_vitrine_categoria")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdCategoria")
                        .HasColumnName("id_categoria")
                        .HasColumnType("int");

                    b.Property<int>("IdVitrine")
                        .HasColumnName("id_vitrine")
                        .HasColumnType("int");

                    b.Property<byte>("NuOrdem")
                        .HasColumnName("nu_ordem")
                        .HasColumnType("tinyint");

                    b.HasKey("IdVitrineCategoria");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdVitrine", "IdCategoria")
                        .HasName("idx_vitrine_categoria");

                    b.ToTable("tb_vitrine_categoria");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbVitrinePraca", b =>
                {
                    b.Property<int>("IdVitrinePraca")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_vitrine_praca")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdPraca")
                        .HasColumnName("id_praca")
                        .HasColumnType("int");

                    b.Property<int>("IdVitrine")
                        .HasColumnName("id_vitrine")
                        .HasColumnType("int");

                    b.HasKey("IdVitrinePraca");

                    b.HasIndex("IdVitrine");

                    b.HasIndex("IdPraca", "IdVitrine")
                        .HasName("idx_vitrine_praca");

                    b.ToTable("tb_vitrine_praca");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbVitrineProdutoSku", b =>
                {
                    b.Property<int>("IdVitrineProdutoSku")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_vitrine_produto_sku")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdProdutoSku")
                        .HasColumnName("id_produto_sku")
                        .HasColumnType("int");

                    b.Property<int>("IdVitrine")
                        .HasColumnName("id_vitrine")
                        .HasColumnType("int");

                    b.Property<int>("NuOrdem")
                        .HasColumnName("nu_ordem")
                        .HasColumnType("int");

                    b.HasKey("IdVitrineProdutoSku");

                    b.HasIndex("IdProdutoSku");

                    b.HasIndex("IdVitrine");

                    b.HasIndex("NuOrdem", "IdVitrine")
                        .HasName("idx_vitrine_produto");

                    b.ToTable("tb_vitrine_produto_sku");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbVitrineTipo", b =>
                {
                    b.Property<int>("IdVitrineTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_vitrine_tipo")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NmVitrineTipo")
                        .IsRequired()
                        .HasColumnName("nm_vitrine_tipo")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdVitrineTipo");

                    b.ToTable("tb_vitrine_tipo");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.Vannonline", b =>
                {
                    b.Property<string>("Assunto")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Organizacao")
                        .HasColumnName("organizacao")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Satisfacao")
                        .HasColumnName("satisfacao")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Solicitante")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.ToTable("vannonline");
                });

            modelBuilder.Entity("Core.Domain.Entities.ApplicationModule", b =>
                {
                    b.Property<int>("IdModule")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_module")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<bool>("IsActivated")
                        .HasColumnName("fl_activated")
                        .HasColumnType("bit")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<bool>("IsInstalled")
                        .HasColumnName("fl_installed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("IdModule");

                    b.ToTable("tb_module");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.Categoria", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.Categoria", "DepartamentoNavigation")
                        .WithMany("SessoesNavigation")
                        .HasForeignKey("IdCategoriaPai")
                        .HasConstraintName("FK_tb_categoria_tb_categoria")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Core.Domain.EF.Entities.ProdutoSku", "IdProdutoSkuDestaqueNavigation")
                        .WithMany("TbCategoria")
                        .HasForeignKey("IdProdutoSkuDestaque")
                        .HasConstraintName("FK_tb_categoria_tb_produto_sku")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.PedidoEntrega", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.Pedido", "IdPedidoNavigation")
                        .WithMany("TbPedidoEntrega")
                        .HasForeignKey("IdPedido")
                        .HasConstraintName("FK_tb_pedido_entrega_tb_pedido")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.PedidoPagamento", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbPagamento", "IdPagamentoNavigation")
                        .WithMany("TbPedidoPagamento")
                        .HasForeignKey("IdPagamento")
                        .HasConstraintName("FK_tb_pedido_pagamento_tb_pagamento")
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.Pedido", "IdPedidoNavigation")
                        .WithMany("PedidoPagamento")
                        .HasForeignKey("IdPedido")
                        .HasConstraintName("FK_tb_pedido_pagamento_tb_pedido")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.PedidoProdutoSku", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.Pedido", "IdPedidoNavigation")
                        .WithMany("PedidoProdutosSku")
                        .HasForeignKey("IdPedido")
                        .HasConstraintName("FK_tb_pedido_produto_sku_tb_pedido")
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.ProdutoSku", "IdProdutoSkuNavigation")
                        .WithMany("TbPedidoProdutoSku")
                        .HasForeignKey("IdProdutoSku")
                        .HasConstraintName("FK_tb_pedido_produto_sku_tb_produto_sku")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.Praca", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.Praca", "IdPracaPadraoNavigation")
                        .WithMany("InverseIdPracaPadraoNavigation")
                        .HasForeignKey("IdPracaPadrao")
                        .HasConstraintName("FK_tb_praca_tb_praca");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.ProdutoSku", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbProduto", "IdProdutoNavigation")
                        .WithMany("TbProdutoSku")
                        .HasForeignKey("IdProduto")
                        .HasConstraintName("FK_tb_produto_sku_tb_produto")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbAcessoAplicativo", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbAplicativo", "IdAplicativoNavigation")
                        .WithMany("TbAcessoAplicativo")
                        .HasForeignKey("IdAplicativo")
                        .HasConstraintName("FK_tb_acesso_aplicativo_tb_aplicativo")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbBackofficeSessao", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbUsuario", "IdUsuarioNavigation")
                        .WithMany("TbBackofficeSessao")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK_tb_backoffice_sessao_tb_usuario")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbBanner", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbBannerTarget", "IdBannerTargetNavigation")
                        .WithMany("TbBanner")
                        .HasForeignKey("IdBannerTarget")
                        .HasConstraintName("FK_tb_banner_tb_banner_target")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbLayoutPosicao", "IdLayoutPosicaoNavigation")
                        .WithMany("TbBanner")
                        .HasForeignKey("IdLayoutPosicao")
                        .HasConstraintName("FK_tb_banner_tb_layout_posicao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbBannerBusca", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbBanner", "IdBannerNavigation")
                        .WithMany("TbBannerBusca")
                        .HasForeignKey("IdBanner")
                        .HasConstraintName("FK_tb_banner_busca_tb_banner")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbBannerCategoria", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbBanner", "IdBannerNavigation")
                        .WithMany("TbBannerCategoria")
                        .HasForeignKey("IdBanner")
                        .HasConstraintName("FK_tb_banner_categoria_tb_banner")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.Categoria", "IdCategoriaNavigation")
                        .WithMany("TbBannerCategoria")
                        .HasForeignKey("IdCategoria")
                        .HasConstraintName("FK_tb_banner_categoria_tb_categoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbBannerPraca", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbBanner", "IdBannerNavigation")
                        .WithMany("TbBannerPraca")
                        .HasForeignKey("IdBanner")
                        .HasConstraintName("FK_tb_banner_praca_tb_banner")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.Praca", "IdPracaNavigation")
                        .WithMany("TbBannerPraca")
                        .HasForeignKey("IdPraca")
                        .HasConstraintName("FK_tb_banner_praca_tb_praca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbBannerProduto", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbBanner", "IdBannerNavigation")
                        .WithMany("TbBannerProduto")
                        .HasForeignKey("IdBanner")
                        .HasConstraintName("FK_tb_banner_produto_tb_banner")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbProduto", "IdProdutoNavigation")
                        .WithMany("TbBannerProduto")
                        .HasForeignKey("IdProduto")
                        .HasConstraintName("FK_tb_banner_produto_tb_produto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbBannerVitrine", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbBanner", "IdBannerNavigation")
                        .WithMany("TbBannerVitrine")
                        .HasForeignKey("IdBanner")
                        .HasConstraintName("FK_tb_banner_vitrine_tb_banner")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbVitrine", "IdVitrineNavigation")
                        .WithMany("TbBannerVitrine")
                        .HasForeignKey("IdVitrine")
                        .HasConstraintName("FK_tb_banner_vitrine_tb_vitrine")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbCategoriaSeo", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.Categoria", "IdCategoriaNavigation")
                        .WithMany("TbCategoriaSeo")
                        .HasForeignKey("IdCategoria")
                        .HasConstraintName("FK_tb_categoria_seo_tb_categoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbClienteEndereco", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.Cliente", "IdClienteNavigation")
                        .WithMany("TbClienteEndereco")
                        .HasForeignKey("IdCliente")
                        .HasConstraintName("FK_tb_cliente_endereco_tb_cliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbClienteEnderecoTipo", "IdClienteEnderecoTipoNavigation")
                        .WithMany("TbClienteEndereco")
                        .HasForeignKey("IdClienteEnderecoTipo")
                        .HasConstraintName("FK_tb_cliente_endereco_tb_cliente_endereco_tipo")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbClienteObservacao", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.Cliente", "IdClienteNavigation")
                        .WithMany("TbClienteObservacao")
                        .HasForeignKey("IdCliente")
                        .HasConstraintName("FK_tb_cliente_observacao_tb_cliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbUsuario", "IdUsuarioNavigation")
                        .WithMany("TbClienteObservacao")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK_tb_cliente_observacao_tb_usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbConteudo", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbConteudoCategoria", "IdConteudoCategoriaNavigation")
                        .WithMany("TbConteudo")
                        .HasForeignKey("IdConteudoCategoria")
                        .HasConstraintName("FK_tb_conteudo_tb_conteudo_categoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbConteudoTarget", "IdConteudoTargetNavigation")
                        .WithMany("TbConteudo")
                        .HasForeignKey("IdConteudoTarget")
                        .HasConstraintName("FK_tb_conteudo_tb_conteudo_target")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbConteudoTipo", "IdConteudoTipoNavigation")
                        .WithMany("TbConteudo")
                        .HasForeignKey("IdConteudoTipo")
                        .HasConstraintName("FK_tb_conteudo_tb_conteudo_tipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbConteudoConteudoLocal", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbConteudo", "IdConteudoNavigation")
                        .WithMany("TbConteudoConteudoLocal")
                        .HasForeignKey("IdConteudo")
                        .HasConstraintName("FK_tb_conteudo_conteudo_local_tb_conteudo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbConteudoLocal", "IdConteudoLocalNavigation")
                        .WithMany("TbConteudoConteudoLocal")
                        .HasForeignKey("IdConteudoLocal")
                        .HasConstraintName("FK_tb_conteudo_conteudo_local_tb_conteudo_local")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbConteudoSeo", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbConteudo", "IdConteudoNavigation")
                        .WithMany("TbConteudoSeo")
                        .HasForeignKey("IdConteudo")
                        .HasConstraintName("FK_tb_conteudo_seo_tb_conteudo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbEmail", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbEmailTipo", "IdEmailTipoNavigation")
                        .WithMany("TbEmail")
                        .HasForeignKey("IdEmailTipo")
                        .HasConstraintName("FK_tb_email_tb_email_tipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbPedidoStatus", "IdPedidoStatusNavigation")
                        .WithMany("TbEmail")
                        .HasForeignKey("IdPedidoStatus")
                        .HasConstraintName("FK_tb_email_tb_pedido_status")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbEspecificacao", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbEspecificacaoTipo", "IdEspecificacaoTipoNavigation")
                        .WithMany("TbEspecificacao")
                        .HasForeignKey("IdEspecificacaoTipo")
                        .HasConstraintName("FK_tb_especificacao_tb_especificacao_tipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbEtiqueta", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbEtiquetaTipo", "IdEtiquetaTipoNavigation")
                        .WithMany("TbEtiqueta")
                        .HasForeignKey("IdEtiquetaTipo")
                        .HasConstraintName("FK_tb_etiqueta_tb_etiqueta_tipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbFaq", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbFaqCategoria", "IdFaqCategoriaNavigation")
                        .WithMany("TbFaq")
                        .HasForeignKey("IdFaqCategoria")
                        .HasConstraintName("FK_tb_faq_tb_faq_categoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbFiltro", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbFiltroTipo", "IdFiltroTipoNavigation")
                        .WithMany("TbFiltro")
                        .HasForeignKey("IdFiltroTipo")
                        .HasConstraintName("FK_tb_filtro_tb_filtro_tipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbFiltroTipoCategoria", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbFiltroTipo", "IdFiltroTipoNavigation")
                        .WithMany("TbFiltroTipoCategoria")
                        .HasForeignKey("IdFiltroTipo")
                        .HasConstraintName("FK_tb_filtro_tipo_categoria_tb_filtro_tipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbFormaPagamento", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbFormaPagamentoTipo", "IdFormaPagamentoTipoNavigation")
                        .WithMany("TbFormaPagamento")
                        .HasForeignKey("IdFormaPagamentoTipo")
                        .HasConstraintName("FK_tb_forma_pagamento_tb_forma_pagamento_tipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbGateway", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbGatewayTipo", "IdGatewayTipoNavigation")
                        .WithMany("TbGateway")
                        .HasForeignKey("IdGatewayTipo")
                        .HasConstraintName("FK_tb_gateway_tb_gateway_tipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbGatewayPraca", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbGateway", "IdGatewayNavigation")
                        .WithMany("TbGatewayPraca")
                        .HasForeignKey("IdGateway")
                        .HasConstraintName("FK_tb_gateway_praca_tb_gateway")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.Praca", "IdPracaNavigation")
                        .WithMany("TbGatewayPraca")
                        .HasForeignKey("IdPraca")
                        .HasConstraintName("FK_tb_gateway_praca_tb_praca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbGatewayTipoFormaPagamento", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbFormaPagamento", "IdFormaPagamentoNavigation")
                        .WithMany("TbGatewayTipoFormaPagamento")
                        .HasForeignKey("IdFormaPagamento")
                        .HasConstraintName("FK_tb_gateway_tipo_forma_pagamento_tb_forma_pagamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbGatewayTipo", "IdGatewayTipoNavigation")
                        .WithMany("TbGatewayTipoFormaPagamento")
                        .HasForeignKey("IdGatewayTipo")
                        .HasConstraintName("FK_tb_gateway_tipo_forma_pagamento_tb_gateway_tipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbGondolaProdutoSku", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.ProdutoSku", "IdProdutoSkuNavigation")
                        .WithMany("TbGondolaProdutoSku")
                        .HasForeignKey("IdProdutoSku")
                        .HasConstraintName("FK_tb_gondola_produto_sku_tb_produto_sku")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbGraficoCockpit", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbAplicativo", "IdAplicativoNavigation")
                        .WithMany("TbGraficoCockpit")
                        .HasForeignKey("IdAplicativo")
                        .HasConstraintName("FK_tb_grafico_cockpit_tb_aplicativo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbUsuario", "IdUsuarioNavigation")
                        .WithMany("TbGraficoCockpit")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK_tb_grafico_cockpit_tb_usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbLayoutPosicao", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbLayout", "IdLayoutNavigation")
                        .WithMany("TbLayoutPosicao")
                        .HasForeignKey("IdLayout")
                        .HasConstraintName("FK_tb_layout_posicao_tb_layout")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbPosicao", "IdPosicaoNavigation")
                        .WithMany("TbLayoutPosicao")
                        .HasForeignKey("IdPosicao")
                        .HasConstraintName("FK_tb_layout_posicao_tb_posicao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbListaDesejo", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.Cliente", "IdClienteNavigation")
                        .WithMany("TbListaDesejo")
                        .HasForeignKey("IdCliente")
                        .HasConstraintName("FK_tb_lista_desejo_tb_cliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbListaDesejoPeriodo", "IdListaDesejoPeriodoNavigation")
                        .WithMany("TbListaDesejo")
                        .HasForeignKey("IdListaDesejoPeriodo")
                        .HasConstraintName("FK_tb_lista_desejo_tb_lista_desejo_periodo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbListaDesejoProdutoSku", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbListaDesejo", "IdListaDesejoNavigation")
                        .WithMany("TbListaDesejoProdutoSku")
                        .HasForeignKey("IdListaDesejo")
                        .HasConstraintName("FK_tb_lista_desejo_produto_sku_tb_lista_desejo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.ProdutoSku", "IdProdutoSkuNavigation")
                        .WithMany("TbListaDesejoProdutoSku")
                        .HasForeignKey("IdProdutoSku")
                        .HasConstraintName("FK_tb_lista_desejo_produto_sku_tb_produto_sku")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbLogTelevendas", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbUsuarioTelevendas", "IdUsuarioTelevendasNavigation")
                        .WithMany("TbLogTelevendas")
                        .HasForeignKey("IdUsuarioTelevendas")
                        .HasConstraintName("FK_tb_log_televendas_tb_usuario_televedas")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbLojaEspecialBanner", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbLojaEspecial", "IdLojaEspecialNavigation")
                        .WithMany("TbLojaEspecialBanner")
                        .HasForeignKey("IdLojaEspecial")
                        .HasConstraintName("FK_tb_loja_especial_banner_tb_loja_especial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbLojaEspecialPosicao", "IdLojaEspecialPosicaoNavigation")
                        .WithMany("TbLojaEspecialBanner")
                        .HasForeignKey("IdLojaEspecialPosicao")
                        .HasConstraintName("FK_tb_loja_especial_banner_tb_loja_especial_posicao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbLojaEspecialCategoria", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbLojaEspecialSecao", "IdLojaEspecialSecaoNavigation")
                        .WithMany("TbLojaEspecialCategoria")
                        .HasForeignKey("IdLojaEspecialSecao")
                        .HasConstraintName("FK_tb_loja_especial_categoria_tb_loja_especial_secao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbLojaEspecialDepartamento", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbLojaEspecial", "IdLojaEspecialNavigation")
                        .WithMany("TbLojaEspecialDepartamento")
                        .HasForeignKey("IdLojaEspecial")
                        .HasConstraintName("FK_tb_loja_especial_departamento_tb_loja_especial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbLojaEspecialMarca", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbLojaEspecial", "IdLojaEspecialNavigation")
                        .WithMany("TbLojaEspecialMarca")
                        .HasForeignKey("IdLojaEspecial")
                        .HasConstraintName("FK_tb_loja_especial_marca_tb_loja_especial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbMarca", "IdMarcaNavigation")
                        .WithMany("TbLojaEspecialMarca")
                        .HasForeignKey("IdMarca")
                        .HasConstraintName("FK_tb_loja_especial_marca_tb_marca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbLojaEspecialProduto", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbLojaEspecial", "IdLojaEspecialNavigation")
                        .WithMany("TbLojaEspecialProduto")
                        .HasForeignKey("IdLojaEspecial")
                        .HasConstraintName("FK_tb_loja_especial_produto_tb_loja_especial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbLojaEspecialCategoria", "IdLojaEspecialCategoriaNavigation")
                        .WithMany("TbLojaEspecialProduto")
                        .HasForeignKey("IdLojaEspecialCategoria")
                        .HasConstraintName("FK_tb_loja_especial_produto_tb_loja_especial_categoria")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.EF.Entities.TbLojaEspecialDepartamento", "IdLojaEspecialDepartamentoNavigation")
                        .WithMany("TbLojaEspecialProduto")
                        .HasForeignKey("IdLojaEspecialDepartamento")
                        .HasConstraintName("FK_tb_loja_especial_produto_tb_loja_especial_departamento")
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbLojaEspecialSecao", "IdLojaEspecialSecaoNavigation")
                        .WithMany("TbLojaEspecialProduto")
                        .HasForeignKey("IdLojaEspecialSecao")
                        .HasConstraintName("FK_tb_loja_especial_produto_tb_loja_especial_secao");

                    b.HasOne("Core.Domain.EF.Entities.TbProduto", "IdProdutoNavigation")
                        .WithMany("TbLojaEspecialProduto")
                        .HasForeignKey("IdProduto")
                        .HasConstraintName("FK_tb_loja_especial_produto_tb_produto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbLojaEspecialSecao", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbLojaEspecialDepartamento", "IdLojaEspecialDepartamentoNavigation")
                        .WithMany("TbLojaEspecialSecao")
                        .HasForeignKey("IdLojaEspecialDepartamento")
                        .HasConstraintName("FK_tb_loja_especial_secao_tb_loja_especial_departamento")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbLojaEspecialVitrine", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbLojaEspecial", "IdLojaEspecialNavigation")
                        .WithMany("TbLojaEspecialVitrine")
                        .HasForeignKey("IdLojaEspecial")
                        .HasConstraintName("FK_tb_loja_especial_vitrine_tb_loja_especial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbLojaEspecialVitrineProduto", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbLojaEspecialVitrine", "IdLojaEspecialVitrineNavigation")
                        .WithMany("TbLojaEspecialVitrineProduto")
                        .HasForeignKey("IdLojaEspecialVitrine")
                        .HasConstraintName("FK_tb_loja_especial_vitrine_produto_tb_loja_especial_vitrine")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbProduto", "IdProdutoNavigation")
                        .WithMany("TbLojaEspecialVitrineProduto")
                        .HasForeignKey("IdProduto")
                        .HasConstraintName("FK_tb_loja_especial_vitrine_produto_tb_produto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbMensagemCategoria", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.Categoria", "IdCategoriaNavigation")
                        .WithMany("TbMensagemCategoria")
                        .HasForeignKey("IdCategoria")
                        .HasConstraintName("FK_tb_mensagem_categoria_tb_categoria2")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.EF.Entities.TbMensagem", "IdMensagemNavigation")
                        .WithMany("TbMensagemCategoria")
                        .HasForeignKey("IdMensagem")
                        .HasConstraintName("FK_tb_mensagem_categoria_tb_mensagem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbMensagemMarca", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbMarca", "IdMarcaNavigation")
                        .WithMany("TbMensagemMarca")
                        .HasForeignKey("IdMarca")
                        .HasConstraintName("FK_tb_mensagem_marca_tb_marca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbMensagem", "IdMensagemNavigation")
                        .WithMany("TbMensagemMarca")
                        .HasForeignKey("IdMensagem")
                        .HasConstraintName("FK_tb_mensagem_marca_tb_mensagem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbMensagemPrincipioAtivo", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbMensagem", "IdMensagemNavigation")
                        .WithMany("TbMensagemPrincipioAtivo")
                        .HasForeignKey("IdMensagem")
                        .HasConstraintName("FK_tb_mensagem_principio_ativo_tb_mensagem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbPrincipioAtivo", "IdPrincipioAtivoNavigation")
                        .WithMany("TbMensagemPrincipioAtivo")
                        .HasForeignKey("IdPrincipioAtivo")
                        .HasConstraintName("FK_tb_mensagem_principio_ativo_tb_principio_ativo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbMensagemProdutoControle", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbMensagem", "IdMensagemNavigation")
                        .WithMany("TbMensagemProdutoControle")
                        .HasForeignKey("IdMensagem")
                        .HasConstraintName("FK_tb_mensagem_produto_controle_tb_mensagem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbProdutoControle", "IdProdutoControleNavigation")
                        .WithMany("TbMensagemProdutoControle")
                        .HasForeignKey("IdProdutoControle")
                        .HasConstraintName("FK_tb_mensagem_produto_controle_tb_produto_controle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbMensagemProdutoFamilia", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbMensagem", "IdMensagemNavigation")
                        .WithMany("TbMensagemProdutoFamilia")
                        .HasForeignKey("IdMensagem")
                        .HasConstraintName("FK_tb_mensagem_produto_familia_tb_mensagem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbProdutoFamilia", "IdProdutoFamiliaNavigation")
                        .WithMany("TbMensagemProdutoFamilia")
                        .HasForeignKey("IdProdutoFamilia")
                        .HasConstraintName("FK_tb_mensagem_produto_familia_tb_produto_familia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbMensagemProdutoTipo", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbMensagem", "IdMensagemNavigation")
                        .WithMany("TbMensagemProdutoTipo")
                        .HasForeignKey("IdMensagem")
                        .HasConstraintName("FK_tb_mensagem_produto_tipo_tb_mensagem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbProdutoTipo", "IdProdutoTipoNavigation")
                        .WithMany("TbMensagemProdutoTipo")
                        .HasForeignKey("IdProdutoTipo")
                        .HasConstraintName("FK_tb_mensagem_produto_tipo_tb_produto_tipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbModalidadeEntrega", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.Praca", "IdPracaNavigation")
                        .WithMany("TbModalidadeEntrega")
                        .HasForeignKey("IdPraca")
                        .HasConstraintName("fk_modalidade_praca")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.EF.Entities.TbServicoCorreios", "IdServicoCorreiosNavigation")
                        .WithMany("TbModalidadeEntrega")
                        .HasForeignKey("IdServicoCorreios")
                        .HasConstraintName("FK__tb_modali__id_se__15C52FC4")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbModalidadeEntregaAgenda", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbDiaSemana", "IdDiaSemanaNavigation")
                        .WithMany("TbModalidadeEntregaAgenda")
                        .HasForeignKey("IdDiaSemana")
                        .HasConstraintName("FK_tb_modalidade_entrega_agenda_tb_dia_semana")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbModalidadeEntrega", "IdModalidadeEntregaNavigation")
                        .WithMany("TbModalidadeEntregaAgenda")
                        .HasForeignKey("IdModalidadeEntrega")
                        .HasConstraintName("FK_tb_modalidade_entrega_agenda_tb_modalidade_entrega")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbModalidadeEntregaCep", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbModalidadeEntrega", "IdModalidadeEntregaNavigation")
                        .WithMany("TbModalidadeEntregaCep")
                        .HasForeignKey("IdModalidadeEntrega")
                        .HasConstraintName("FK_tb_modalidade_entrega_cep_tb_modalidade_entrega")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbModalidadeEntregaLoja", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbModalidadeEntrega", "IdModalidadeEntregaNavigation")
                        .WithMany("TbModalidadeEntregaLoja")
                        .HasForeignKey("IdModalidadeEntrega")
                        .HasConstraintName("FK_tb_modalidade_entrega_loja_tb_modalidade_entrega")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbModalidadeEntregaRestricao", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbModalidadeEntrega", "IdModalidadeEntregaNavigation")
                        .WithMany("TbModalidadeEntregaRestricao")
                        .HasForeignKey("IdModalidadeEntrega")
                        .HasConstraintName("FK_tb_modalidade_entrega_restricao_tb_modalidade_entrega")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbOfertaEspecial", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbProduto", "IdProdutoNavigation")
                        .WithMany("TbOfertaEspecial")
                        .HasForeignKey("IdProduto")
                        .HasConstraintName("FK_tb_oferta_especial_tb_produto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPagamento", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbFormaPagamento", "IdFormaPagamentoNavigation")
                        .WithMany("TbPagamento")
                        .HasForeignKey("IdFormaPagamento")
                        .HasConstraintName("FK_tb_pagamento_tb_forma_pagamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPagamentoGateway", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbGateway", "IdGatewayNavigation")
                        .WithMany("TbPagamentoGateway")
                        .HasForeignKey("IdGateway")
                        .HasConstraintName("FK_tb_pagamento_gateway_tb_gateway")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbPagamento", "IdPagamentoNavigation")
                        .WithMany("TbPagamentoGateway")
                        .HasForeignKey("IdPagamento")
                        .HasConstraintName("FK_tb_pagamento_gateway_tb_pagamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPagamentoParcela", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbPagamento", "IdPagamentoNavigation")
                        .WithMany("TbPagamentoParcela")
                        .HasForeignKey("IdPagamento")
                        .HasConstraintName("FK_tb_pagamento_parcela_tb_pagamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbParceiroXmlProduto", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbParceiro", "IdParceiroNavigation")
                        .WithMany("TbParceiroXmlProduto")
                        .HasForeignKey("IdParceiro")
                        .HasConstraintName("FK_tb_parceiro_xml_produto_tb_parceiro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.ProdutoSku", "IdProdutoSkuNavigation")
                        .WithMany("TbParceiroXmlProduto")
                        .HasForeignKey("IdProdutoSku")
                        .HasConstraintName("FK_tb_parceiro_xml_produto_tb_produto_sku")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPedidoHistorico", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.Pedido", "IdPedidoNavigation")
                        .WithMany("TbPedidoHistorico")
                        .HasForeignKey("IdPedido")
                        .HasConstraintName("FK_tb_pedido_historico_tb_pedido")
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbUsuario", "IdUsuarioNavigation")
                        .WithMany("TbPedidoHistorico")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK_tb_pedido_historico_tb_usuario")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPedidoLog", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.Pedido", "IdPedidoNavigation")
                        .WithMany("TbPedidoLog")
                        .HasForeignKey("IdPedido")
                        .HasConstraintName("FK_tb_pedido_log_tb_pedido")
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbPedidoStatus", "IdPedidoStatusAnteriorNavigation")
                        .WithMany("TbPedidoLogIdPedidoStatusAnteriorNavigation")
                        .HasForeignKey("IdPedidoStatusAnterior")
                        .HasConstraintName("FK_tb_pedido_log_tb_pedido_status")
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbPedidoStatus", "IdPedidoStatusAtualNavigation")
                        .WithMany("TbPedidoLogIdPedidoStatusAtualNavigation")
                        .HasForeignKey("IdPedidoStatusAtual")
                        .HasConstraintName("FK_tb_pedido_log_tb_pedido_status1")
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbUsuario", "IdUsuarioNavigation")
                        .WithMany("TbPedidoLog")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK_tb_pedido_log_tb_usuario1");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPedidoPagamentoLog", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.Pedido", "IdPedidoNavigation")
                        .WithMany("TbPedidoPagamentoLog")
                        .HasForeignKey("IdPedido")
                        .HasConstraintName("FK_tb_pedido_pagamento_log_tb_pedido")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPedidoProdutoKit", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.PedidoProdutoSku", "IdPedidoProdutoSkuNavigation")
                        .WithMany("TbPedidoProdutoKit")
                        .HasForeignKey("IdPedidoProdutoSku")
                        .HasConstraintName("FK_tb_pedido_produto_kit_tb_pedido_produto_sku")
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.ProdutoSku", "IdProdutoItemNavigation")
                        .WithMany("TbPedidoProdutoKit")
                        .HasForeignKey("IdProdutoItem")
                        .HasConstraintName("FK_tb_pedido_produto_kit_tb_produto_sku")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPedidoSevenpdv", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.Pedido", "IdPedidoNavigation")
                        .WithMany("TbPedidoSevenpdv")
                        .HasForeignKey("IdPedido")
                        .HasConstraintName("tb_pedido_sevenpdv_fk_tb_pedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPracaCep", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.Praca", "IdPracaNavigation")
                        .WithMany("TbPracaCep")
                        .HasForeignKey("IdPraca")
                        .HasConstraintName("FK_tb_praca_cep_tb_praca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProduto", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbMarca", "IdMarcaNavigation")
                        .WithMany("TbProduto")
                        .HasForeignKey("IdMarca")
                        .HasConstraintName("FK_tb_produto_tb_marca")
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbProdutoControle", "IdProdutoControleNavigation")
                        .WithMany("TbProduto")
                        .HasForeignKey("IdProdutoControle")
                        .HasConstraintName("FK_tb_produto_tb_produto_controle");

                    b.HasOne("Core.Domain.EF.Entities.TbProdutoFamilia", "IdProdutoFamiliaNavigation")
                        .WithMany("TbProduto")
                        .HasForeignKey("IdProdutoFamilia")
                        .HasConstraintName("FK_tb_produto_tb_produto_familia");

                    b.HasOne("Core.Domain.EF.Entities.TbProdutoTipo", "IdProdutoTipoNavigation")
                        .WithMany("TbProduto")
                        .HasForeignKey("IdProdutoTipo")
                        .HasConstraintName("FK_tb_produto_tb_produto_tipo");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoAvaliacao", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.Cliente", "IdClienteNavigation")
                        .WithMany("TbProdutoAvaliacao")
                        .HasForeignKey("IdCliente")
                        .HasConstraintName("FK_tb_produto_avaliacao_tb_cliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbProduto", "IdProdutoNavigation")
                        .WithMany("TbProdutoAvaliacao")
                        .HasForeignKey("IdProduto")
                        .HasConstraintName("FK_tb_produto_avaliacao_tb_produto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoCategoria", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.Categoria", "IdCategoriaNavigation")
                        .WithMany("TbProdutoCategoriaIdCategoriaNavigation")
                        .HasForeignKey("IdCategoria")
                        .HasConstraintName("FK_tb_produto_categoria_tb_categoria2");

                    b.HasOne("Core.Domain.EF.Entities.Categoria", "IdDepartamentoNavigation")
                        .WithMany("TbProdutoCategoriaIdDepartamentoNavigation")
                        .HasForeignKey("IdDepartamento")
                        .HasConstraintName("FK_tb_produto_categoria_tb_categoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbProduto", "IdProdutoNavigation")
                        .WithMany("TbProdutoCategoria")
                        .HasForeignKey("IdProduto")
                        .HasConstraintName("FK_tb_produto_categoria_tb_produto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.Categoria", "IdSecaoNavigation")
                        .WithMany("TbProdutoCategoriaIdSecaoNavigation")
                        .HasForeignKey("IdSecao")
                        .HasConstraintName("FK_tb_produto_categoria_tb_categoria1")
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.Categoria", "IdSubcategoriaNavigation")
                        .WithMany("TbProdutoCategoriaIdSubcategoriaNavigation")
                        .HasForeignKey("IdSubcategoria")
                        .HasConstraintName("FK_tb_produto_categoria_tb_categoria3");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoDescricao", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbProduto", "IdProdutoNavigation")
                        .WithMany("TbProdutoDescricao")
                        .HasForeignKey("IdProduto")
                        .HasConstraintName("FK_tb_produto_descricao_tb_produto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbProdutoDescricaoTipo", "IdProdutoDescricaoTipoNavigation")
                        .WithMany("TbProdutoDescricao")
                        .HasForeignKey("IdProdutoDescricaoTipo")
                        .HasConstraintName("FK_tb_produto_descricao_tb_produto_descricao_tipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoEtiqueta", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbEtiqueta", "IdEtiquetaNavigation")
                        .WithMany("TbProdutoEtiqueta")
                        .HasForeignKey("IdEtiqueta")
                        .HasConstraintName("FK_tb_produto_etiqueta_tb_etiqueta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbProduto", "IdProdutoNavigation")
                        .WithMany("TbProdutoEtiqueta")
                        .HasForeignKey("IdProduto")
                        .HasConstraintName("FK_tb_produto_etiqueta_tb_produto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbPromocao", "IdPromocaoNavigation")
                        .WithMany("TbProdutoEtiqueta")
                        .HasForeignKey("IdPromocao")
                        .HasConstraintName("FK_tb_produto_etiqueta_tb_promocao")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoFamiliaModalidade", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbModalidadeEntrega", "IdModalidadeEntregaNavigation")
                        .WithMany("TbProdutoFamiliaModalidade")
                        .HasForeignKey("IdModalidadeEntrega")
                        .HasConstraintName("FK_tb_produto_familia_modalidade_tb_modalidade_entrega")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbProdutoFamilia", "IdProdutoFamiliaNavigation")
                        .WithMany("TbProdutoFamiliaModalidade")
                        .HasForeignKey("IdProdutoFamilia")
                        .HasConstraintName("FK_tb_produto_familia_modalidade_tb_produto_familia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoKit", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbProduto", "IdProdutoNavigation")
                        .WithMany("TbProdutoKit")
                        .HasForeignKey("IdProduto")
                        .HasConstraintName("FK_tb_produto_kit_tb_produto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.ProdutoSku", "IdProdutoSkuNavigation")
                        .WithMany("TbProdutoKit")
                        .HasForeignKey("IdProdutoSku")
                        .HasConstraintName("FK_tb_produto_kit_tb_produto_sku")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoLancamento", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbProduto", "IdProdutoNavigation")
                        .WithMany("TbProdutoLancamento")
                        .HasForeignKey("IdProduto")
                        .HasConstraintName("FK_tb_produto_lancamento_tb_produto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoLog", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbProduto", "IdProdutoNavigation")
                        .WithMany("TbProdutoLog")
                        .HasForeignKey("IdProduto")
                        .HasConstraintName("FK_tb_produto_log_tb_produto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbUsuario", "IdUsuarioNavigation")
                        .WithMany("TbProdutoLog")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK_tb_produto_log_tb_usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoPrincipioAtivo", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbPrincipioAtivo", "IdPrincipioAtivoNavigation")
                        .WithMany("TbProdutoPrincipioAtivo")
                        .HasForeignKey("IdPrincipioAtivo")
                        .HasConstraintName("FK_tb_produto_principio_ativo_tb_principio_ativo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbProduto", "IdProdutoNavigation")
                        .WithMany("TbProdutoPrincipioAtivo")
                        .HasForeignKey("IdProduto")
                        .HasConstraintName("FK_tb_produto_principio_ativo_tb_produto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoSeo", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbProduto", "IdProdutoNavigation")
                        .WithMany("TbProdutoSeo")
                        .HasForeignKey("IdProduto")
                        .HasConstraintName("FK_tb_produto_seo_tb_produto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoSkuAviseMe", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.ProdutoSku", "IdProdutoSkuNavigation")
                        .WithMany("TbProdutoSkuAviseMe")
                        .HasForeignKey("IdProdutoSku")
                        .HasConstraintName("FK_tb_produto_sku_avise_me_tb_produto_sku")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoSkuEspecificacao", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbEspecificacao", "IdEspecificacao1Navigation")
                        .WithMany("TbProdutoSkuEspecificacaoIdEspecificacao1Navigation")
                        .HasForeignKey("IdEspecificacao1")
                        .HasConstraintName("FK_tb_produto_sku_especificacao_tb_especificacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbEspecificacao", "IdEspecificacao2Navigation")
                        .WithMany("TbProdutoSkuEspecificacaoIdEspecificacao2Navigation")
                        .HasForeignKey("IdEspecificacao2")
                        .HasConstraintName("FK_tb_produto_sku_especificacao_tb_especificacao1");

                    b.HasOne("Core.Domain.EF.Entities.ProdutoSku", "IdProdutoSkuNavigation")
                        .WithMany("TbProdutoSkuEspecificacao")
                        .HasForeignKey("IdProdutoSku")
                        .HasConstraintName("FK_tb_produto_sku_especificacao_tb_produto_sku")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoSkuFiltro", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbFiltro", "IdFiltroNavigation")
                        .WithMany("TbProdutoSkuFiltro")
                        .HasForeignKey("IdFiltro")
                        .HasConstraintName("FK_tb_produto_sku_filtro_tb_filtro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.ProdutoSku", "IdProdutoSkuNavigation")
                        .WithMany("TbProdutoSkuFiltro")
                        .HasForeignKey("IdProdutoSku")
                        .HasConstraintName("FK_tb_produto_sku_filtro_tb_produto_sku")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoSkuGenerico", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.ProdutoSku", "IdGenericoNavigation")
                        .WithMany("TbProdutoSkuGenericoIdGenericoNavigation")
                        .HasForeignKey("IdGenerico")
                        .HasConstraintName("FK_tb_produto_sku_generico_tb_produto_sku1")
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.ProdutoSku", "IdMedicamentoNavigation")
                        .WithMany("TbProdutoSkuGenericoIdMedicamentoNavigation")
                        .HasForeignKey("IdMedicamento")
                        .HasConstraintName("FK_tb_produto_sku_generico_tb_produto_sku")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoSkuImagem", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.ProdutoSku", "IdProdutoSkuNavigation")
                        .WithMany("TbProdutoSkuImagem")
                        .HasForeignKey("IdProdutoSku")
                        .HasConstraintName("FK_tb_produto_sku_imagem_tb_produto_sku")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoSkuPraca", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.Praca", "IdPracaNavigation")
                        .WithMany("TbProdutoSkuPraca")
                        .HasForeignKey("IdPraca")
                        .HasConstraintName("FK_tb_produto_sku_praca_tb_praca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.ProdutoSku", "IdProdutoSkuNavigation")
                        .WithMany("TbProdutoSkuPraca")
                        .HasForeignKey("IdProdutoSku")
                        .HasConstraintName("FK_tb_produto_sku_praca_tb_produto_sku")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoSkuRelacionado", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.ProdutoSku", "IdProdutoSkuNavigation")
                        .WithMany("TbProdutoSkuRelacionadoIdProdutoSkuNavigation")
                        .HasForeignKey("IdProdutoSku")
                        .HasConstraintName("FK_tb_produto_sku_relacionado_tb_produto_sku")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.ProdutoSku", "IdProdutoSkuRelacaoNavigation")
                        .WithMany("TbProdutoSkuRelacionadoIdProdutoSkuRelacaoNavigation")
                        .HasForeignKey("IdProdutoSkuRelacao")
                        .HasConstraintName("FK_tb_produto_sku_relacionado_tb_produto_sku1")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoSkuVendaCasada", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.ProdutoSku", "IdProdutoSkuNavigation")
                        .WithMany("TbProdutoSkuVendaCasadaIdProdutoSkuNavigation")
                        .HasForeignKey("IdProdutoSku")
                        .HasConstraintName("FK_tb_produto_sku_venda_casada_tb_produto_sku")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.ProdutoSku", "IdProdutoSkuCasadoNavigation")
                        .WithMany("TbProdutoSkuVendaCasadaIdProdutoSkuCasadoNavigation")
                        .HasForeignKey("IdProdutoSkuCasado")
                        .HasConstraintName("FK_tb_produto_sku_venda_casada_tb_produto_sku1")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProdutoVideo", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbProduto", "IdProdutoNavigation")
                        .WithMany("TbProdutoVideo")
                        .HasForeignKey("IdProduto")
                        .HasConstraintName("FK_tb_produto_video_tb_produto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbProgramaProduto", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.ProdutoSku", "IdProdutoSkuNavigation")
                        .WithMany("TbProgramaProduto")
                        .HasForeignKey("IdProdutoSku")
                        .HasConstraintName("FK_tb_programa_produto_tb_produto_sku")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbPrograma", "IdProgramaNavigation")
                        .WithMany("TbProgramaProduto")
                        .HasForeignKey("IdPrograma")
                        .HasConstraintName("FK_tb_programa_produto_tb_programa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocao", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbEtiqueta", "IdEtiquetaNavigation")
                        .WithMany("TbPromocao")
                        .HasForeignKey("IdEtiqueta")
                        .HasConstraintName("FK_tb_promocao_tb_etiqueta");

                    b.HasOne("Core.Domain.EF.Entities.TbPromocaoAcao", "IdPromocaoAcaoNavigation")
                        .WithMany("TbPromocao")
                        .HasForeignKey("IdPromocaoAcao")
                        .HasConstraintName("FK_tb_promocao_tb_promocao_acao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbPromocaoBeneficio", "IdPromocaoBeneficioNavigation")
                        .WithMany("TbPromocao")
                        .HasForeignKey("IdPromocaoBeneficio")
                        .HasConstraintName("FK_tb_promocao_tb_promocao_beneficio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbPromocaoTipo", "IdPromocaoTipoNavigation")
                        .WithMany("TbPromocao")
                        .HasForeignKey("IdPromocaoTipo")
                        .HasConstraintName("FK_tb_promocao_tb_promocao_tipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocaoCategoria", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.Categoria", "IdCategoriaNavigation")
                        .WithMany("TbPromocaoCategoriaIdCategoriaNavigation")
                        .HasForeignKey("IdCategoria")
                        .HasConstraintName("FK_tb_promocao_categoria_tb_categoria")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.EF.Entities.Categoria", "IdDepartamentoNavigation")
                        .WithMany("TbPromocaoCategoriaIdDepartamentoNavigation")
                        .HasForeignKey("IdDepartamento")
                        .HasConstraintName("FK_tb_promocao_categoria_tb_categoria1")
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbPromocao", "IdPromocaoNavigation")
                        .WithMany("TbPromocaoCategoria")
                        .HasForeignKey("IdPromocao")
                        .HasConstraintName("FK_tb_promocao_categoria_tb_promocao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.Categoria", "IdSecaoNavigation")
                        .WithMany("TbPromocaoCategoriaIdSecaoNavigation")
                        .HasForeignKey("IdSecao")
                        .HasConstraintName("FK_tb_promocao_categoria_tb_categoria2");

                    b.HasOne("Core.Domain.EF.Entities.Categoria", "IdSubcategoriaNavigation")
                        .WithMany("TbPromocaoCategoriaIdSubcategoriaNavigation")
                        .HasForeignKey("IdSubcategoria")
                        .HasConstraintName("FK_tb_promocao_categoria_tb_categoria3");
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocaoCep", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbPromocao", "IdPromocaoNavigation")
                        .WithMany("TbPromocaoCep")
                        .HasForeignKey("IdPromocao")
                        .HasConstraintName("FK_tb_promocao_cep_tb_promocao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocaoCliente", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.Cliente", "IdClienteNavigation")
                        .WithMany("TbPromocaoCliente")
                        .HasForeignKey("IdCliente")
                        .HasConstraintName("FK_tb_promocao_cliente_tb_cliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbPromocao", "IdPromocaoNavigation")
                        .WithMany("TbPromocaoCliente")
                        .HasForeignKey("IdPromocao")
                        .HasConstraintName("FK_tb_promocao_cliente_tb_promocao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocaoCupom", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbPromocao", "IdPromocaoNavigation")
                        .WithMany("TbPromocaoCupom")
                        .HasForeignKey("IdPromocao")
                        .HasConstraintName("FK_tb_promocao_cupom_tb_promocao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocaoCupomUtilizado", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.Cliente", "IdClienteNavigation")
                        .WithMany("TbPromocaoCupomUtilizado")
                        .HasForeignKey("IdCliente")
                        .HasConstraintName("FK_tb_promocao_cupom_utilizado_tb_cliente")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.EF.Entities.Pedido", "IdPedidoNavigation")
                        .WithMany("TbPromocaoCupomUtilizado")
                        .HasForeignKey("IdPedido")
                        .HasConstraintName("FK_tb_promocao_cupom_utilizado_tb_pedido")
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbPromocaoCupom", "IdPromocaoCupomNavigation")
                        .WithMany("TbPromocaoCupomUtilizado")
                        .HasForeignKey("IdPromocaoCupom")
                        .HasConstraintName("FK_tb_promocao_cupom_utilizado_tb_promocao_cupom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocaoMarca", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbMarca", "IdMarcaNavigation")
                        .WithMany("TbPromocaoMarca")
                        .HasForeignKey("IdMarca")
                        .HasConstraintName("FK_tb_promocao_marca_tb_marca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbPromocao", "IdPromocaoNavigation")
                        .WithMany("TbPromocaoMarca")
                        .HasForeignKey("IdPromocao")
                        .HasConstraintName("FK_tb_promocao_marca_tb_promocao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocaoModalidade", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbModalidadeEntrega", "IdModalidadeEntregaNavigation")
                        .WithMany("TbPromocaoModalidade")
                        .HasForeignKey("IdModalidadeEntrega")
                        .HasConstraintName("FK_tb_promocao_modalidade_tb_modalidade_entrega")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbPromocao", "IdPromocaoNavigation")
                        .WithMany("TbPromocaoModalidade")
                        .HasForeignKey("IdPromocao")
                        .HasConstraintName("FK_tb_promocao_modalidade_tb_promocao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocaoPagamento", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbFormaPagamento", "IdFormaPagamentoNavigation")
                        .WithMany("TbPromocaoPagamento")
                        .HasForeignKey("IdFormaPagamento")
                        .HasConstraintName("FK_tb_promocao_pagamento_tb_forma_pagamento")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.EF.Entities.TbPromocao", "IdPromocaoNavigation")
                        .WithMany("TbPromocaoPagamento")
                        .HasForeignKey("IdPromocao")
                        .HasConstraintName("FK_tb_promocao_pagamento_tb_promocao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocaoPraca", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.Praca", "IdPracaNavigation")
                        .WithMany("TbPromocaoPraca")
                        .HasForeignKey("IdPraca")
                        .HasConstraintName("FK_tb_promocao_praca_tb_praca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbPromocao", "IdPromocaoNavigation")
                        .WithMany("TbPromocaoPraca")
                        .HasForeignKey("IdPromocao")
                        .HasConstraintName("FK_tb_promocao_praca_tb_promocao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocaoProduto", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbProduto", "IdProdutoNavigation")
                        .WithMany("TbPromocaoProduto")
                        .HasForeignKey("IdProduto")
                        .HasConstraintName("FK_tb_promocao_produto_tb_produto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbPromocao", "IdPromocaoNavigation")
                        .WithMany("TbPromocaoProduto")
                        .HasForeignKey("IdPromocao")
                        .HasConstraintName("FK_tb_promocao_produto_tb_promocao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocaoTipoAcao", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbPromocaoAcao", "IdPromocaoAcaoNavigation")
                        .WithMany("TbPromocaoTipoAcao")
                        .HasForeignKey("IdPromocaoAcao")
                        .HasConstraintName("FK_tb_promocao_tipo_acao_tb_promocao_acao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbPromocaoTipo", "IdPromocaoTipoNavigation")
                        .WithMany("TbPromocaoTipoAcao")
                        .HasForeignKey("IdPromocaoTipo")
                        .HasConstraintName("FK_tb_promocao_tipo_acao_tb_promocao_tipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbPromocaoTipoBeneficio", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbPromocaoBeneficio", "IdPromocaoBeneficioNavigation")
                        .WithMany("TbPromocaoTipoBeneficio")
                        .HasForeignKey("IdPromocaoBeneficio")
                        .HasConstraintName("FK_tb_promocao_tipo_beneficio_tb_promocao_beneficio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbPromocaoTipo", "IdPromocaoTipoNavigation")
                        .WithMany("TbPromocaoTipoBeneficio")
                        .HasForeignKey("IdPromocaoTipo")
                        .HasConstraintName("FK_tb_promocao_tipo_beneficio_tb_promocao_tipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbQuemComprouComprouTambem", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.ProdutoSku", "IdProdutoSkuNavigation")
                        .WithMany("TbQuemComprouComprouTambem")
                        .HasForeignKey("IdProdutoSku")
                        .HasConstraintName("FK_tb_quem_comprou_comprou_tambem_tb_produto_sku")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbQuemViuComprou", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.ProdutoSku", "IdProdutoSkuCompradoNavigation")
                        .WithMany("TbQuemViuComprouIdProdutoSkuCompradoNavigation")
                        .HasForeignKey("IdProdutoSkuComprado")
                        .HasConstraintName("FK_tb_quem_viu_comprou_tb_produto_sku1")
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.ProdutoSku", "IdProdutoSkuVistoNavigation")
                        .WithMany("TbQuemViuComprouIdProdutoSkuVistoNavigation")
                        .HasForeignKey("IdProdutoSkuVisto")
                        .HasConstraintName("FK_tb_quem_viu_comprou_tb_produto_sku")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbQuemViuViuTambem", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.ProdutoSku", "IdProdutoSkuNavigation")
                        .WithMany("TbQuemViuViuTambemIdProdutoSkuNavigation")
                        .HasForeignKey("IdProdutoSku")
                        .HasConstraintName("FK_tb_quem_viu_viu_tambem_tb_produto_sku")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.ProdutoSku", "IdProdutoSkuVistoNavigation")
                        .WithMany("TbQuemViuViuTambemIdProdutoSkuVistoNavigation")
                        .HasForeignKey("IdProdutoSkuVisto")
                        .HasConstraintName("FK_tb_quem_viu_viu_tambem_tb_produto_sku1")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbRodape", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.Praca", "IdPracaNavigation")
                        .WithMany("TbRodape")
                        .HasForeignKey("IdPraca")
                        .HasConstraintName("FK_tb_rodape_tb_praca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbSecGroupsApps", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbSecApps", "AppNameNavigation")
                        .WithMany("TbSecGroupsApps")
                        .HasForeignKey("AppName")
                        .HasConstraintName("FK_tb_sec_groups_apps_tb_sec_apps")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbSecGroups", "Group")
                        .WithMany("TbSecGroupsApps")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_tb_sec_groups_apps_tb_sec_groups")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbSecUsersGroups", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbSecGroups", "Group")
                        .WithMany("TbSecUsersGroups")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_tb_sec_users_groups_tb_sec_groups")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbSecUsers", "LoginNavigation")
                        .WithMany("TbSecUsersGroups")
                        .HasForeignKey("Login")
                        .HasConstraintName("FK_tb_sec_users_groups_tb_sec_users")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbSevenpdvSessao", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbSevenpdvLogon", "IdSevenpdvLogonNavigation")
                        .WithMany("TbSevenpdvSessao")
                        .HasForeignKey("IdSevenpdvLogon")
                        .HasConstraintName("FK_tb_sevenpdv_sessao_tb_sevenpdv_logon")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbSkuPracaMovimentacao", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbProdutoSkuPraca", "IdProdutoSkuPracaNavigation")
                        .WithOne("TbSkuPracaMovimentacao")
                        .HasForeignKey("Core.Domain.EF.Entities.TbSkuPracaMovimentacao", "IdProdutoSkuPraca")
                        .HasConstraintName("FK_tb_sku_praca_movimentacao_tb_produto_sku_praca1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbSuperDesconto", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.ProdutoSku", "IdProdutoSkuNavigation")
                        .WithMany("TbSuperDesconto")
                        .HasForeignKey("IdProdutoSku")
                        .HasConstraintName("FK_tb_super_desconto_tb_produto_sku")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbUsuario", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbUsuarioGrupo", "IdUsuarioGrupoNavigation")
                        .WithMany("TbUsuario")
                        .HasForeignKey("IdUsuarioGrupo")
                        .HasConstraintName("FK_tb_usuario_tb_usuario_grupo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbUsuarioGrupoAcesso", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbAcesso", "IdAcessoNavigation")
                        .WithMany("TbUsuarioGrupoAcesso")
                        .HasForeignKey("IdAcesso")
                        .HasConstraintName("FK_tb_usuario_grupo_acesso_tb_acesso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbUsuarioGrupo", "IdUsuarioGrupoNavigation")
                        .WithMany("TbUsuarioGrupoAcesso")
                        .HasForeignKey("IdUsuarioGrupo")
                        .HasConstraintName("FK_tb_usuario_grupo_acesso_tb_usuario_grupo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbUsuarioIp", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbUsuario", "IdUsuarioNavigation")
                        .WithMany("TbUsuarioIp")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK_tb_usuario_ip_tb_usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbUsuarioPraca", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.Praca", "IdPracaNavigation")
                        .WithMany("TbUsuarioPraca")
                        .HasForeignKey("IdPraca")
                        .HasConstraintName("FK_tb_usuario_praca_tb_praca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbUsuario", "IdUsuarioNavigation")
                        .WithMany("TbUsuarioPraca")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK_tb_usuario_praca_tb_usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbUsuarioTelevendas", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbUsuarioGrupoTelevendas", "IdUsuarioGrupoTelevendasNavigation")
                        .WithMany("TbUsuarioTelevendas")
                        .HasForeignKey("IdUsuarioGrupoTelevendas")
                        .HasConstraintName("FK_tb_usuario_televedas_tb_usuario_grupo_televendas")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbVitrine", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.TbVitrineTipo", "IdVitrineTipoNavigation")
                        .WithMany("TbVitrine")
                        .HasForeignKey("IdVitrineTipo")
                        .HasConstraintName("FK_tb_vitrine_tb_vitrine_tipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbVitrineCategoria", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.Categoria", "IdCategoriaNavigation")
                        .WithMany("TbVitrineCategoria")
                        .HasForeignKey("IdCategoria")
                        .HasConstraintName("FK_tb_vitrine_categoria_tb_categoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbVitrine", "IdVitrineNavigation")
                        .WithMany("TbVitrineCategoria")
                        .HasForeignKey("IdVitrine")
                        .HasConstraintName("FK_tb_vitrine_categoria_tb_vitrine")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbVitrinePraca", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.Praca", "IdPracaNavigation")
                        .WithMany("TbVitrinePraca")
                        .HasForeignKey("IdPraca")
                        .HasConstraintName("FK_tb_vitrine_praca_tb_praca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbVitrine", "IdVitrineNavigation")
                        .WithMany("TbVitrinePraca")
                        .HasForeignKey("IdVitrine")
                        .HasConstraintName("FK_tb_vitrine_praca_tb_vitrine")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.EF.Entities.TbVitrineProdutoSku", b =>
                {
                    b.HasOne("Core.Domain.EF.Entities.ProdutoSku", "IdProdutoSkuNavigation")
                        .WithMany("TbVitrineProdutoSku")
                        .HasForeignKey("IdProdutoSku")
                        .HasConstraintName("FK_tb_vitrine_produto_sku_tb_produto_sku")
                        .IsRequired();

                    b.HasOne("Core.Domain.EF.Entities.TbVitrine", "IdVitrineNavigation")
                        .WithMany("TbVitrineProdutoSku")
                        .HasForeignKey("IdVitrine")
                        .HasConstraintName("FK_tb_vitrine_produto_sku_tb_vitrine")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
